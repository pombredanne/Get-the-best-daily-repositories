Copyright © 2024 Apple Inc. All Rights Reserved.

APPLE INC.
PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT
PLEASE READ THE FOLLOWING PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT (“AGREEMENT”) CAREFULLY BEFORE DOWNLOADING OR USING THE APPLE SOFTWARE ACCOMPANYING THIS AGREEMENT(AS DEFINED BELOW). BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING TO BE BOUND BY THE TERMS OF THIS AGREEMENT. IF YOU DO NOT AGREE TO THE TERMS OF THIS AGREEMENT, DO NOT DOWNLOAD OR USE THE APPLE SOFTWARE. THESE TERMS AND CONDITIONS CONSTITUTE A LEGAL AGREEMENT BETWEEN YOU AND APPLE.
IMPORTANT NOTE: BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING ON YOUR OWN BEHALF AND/OR ON BEHALF OF YOUR COMPANY OR ORGANIZATION TO THE TERMS OF THIS AGREEMENT.
1. As used in this Agreement, the term “Apple Software” collectively means and includes all of the Apple Private Cloud Compute materials provided by Apple here, including but not limited to the Apple Private Cloud Compute software, tools, data, files, frameworks, libraries, documentation, logs and other Apple-created materials. In consideration for your agreement to abide by the following terms, conditioned upon your compliance with these terms and subject to these terms, Apple grants you, for a period of ninety (90) days from the date you download the Apple Software, a limited, non-exclusive, non-sublicensable license under Apple’s copyrights in the Apple Software to download, install, compile and run the Apple Software internally within your organization only on a single Apple-branded computer you own or control, for the sole purpose of verifying the security and privacy characteristics of Apple Private Cloud Compute. This Agreement does not allow the Apple Software to exist on more than one Apple-branded computer at a time, and you may not distribute or make the Apple Software available over a network where it could be used by multiple devices at the same time. You may not, directly or indirectly, redistribute the Apple Software or any portions thereof. The Apple Software is only licensed and intended for use as expressly stated above and may not be used for other purposes or in other contexts without Apple's prior written permission. Except as expressly stated in this notice, no other rights or licenses, express or implied, are granted by Apple herein.
2. The Apple Software is provided by Apple on an "AS IS" basis. APPLE MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS, SYSTEMS, OR SERVICES. APPLE DOES NOT WARRANT THAT THE APPLE SOFTWARE WILL MEET YOUR REQUIREMENTS, THAT THE OPERATION OF THE APPLE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, THAT DEFECTS IN THE APPLE SOFTWARE WILL BE CORRECTED, OR THAT THE APPLE SOFTWARE WILL BE COMPATIBLE WITH FUTURE APPLE PRODUCTS, SOFTWARE OR SERVICES. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY APPLE OR AN APPLE AUTHORIZED REPRESENTATIVE WILL CREATE A WARRANTY.
3. IN NO EVENT SHALL APPLE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, COMPILATION OR OPERATION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
4. This Agreement is effective until terminated. Your rights under this Agreement will terminate automatically without notice from Apple if you fail to comply with any term(s) of this Agreement. Upon termination, you agree to cease all use of the Apple Software and destroy all copies, full or partial, of the Apple Software. This Agreement constitutes the entire understanding of the parties with respect to the subject matter contained herein, and supersedes all prior negotiations, representations, or understandings, written or oral. This Agreement will be governed and construed in accordance with the laws of the State of California, without regard to its choice of law rules.
You may report security issues about Apple products to product-security@apple.com, as described here: https://www.apple.com/support/security/. Non-security bugs and enhancement requests can be made via https://bugreport.apple.com as described here: https://developer.apple.com/bug-reporting/
EA1937
10/02/2024

{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://stashweb.sd.apple.com/projects/COREOS/repos/darwinosbits/raw/DarwinInit/Models/schema.json",
	"title": "darwin-init JSON Schema",
	"description": "Schema describing darwin-init JSON configuration structure",
	"type": "object",
	"properties": {
		"ca-roots": {
			"description": "CA root trust",
			"type": "object",
			"properties": {
				"apple-corporate-root": {
					"description": "rdar://93920588 (Accessing Corp cert from DarwinOS customer build.)",
					"type": "boolean"
				}
			}
		},
		"cryptex": {
			"description": "Cryptex installation",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"url": {
						"description": "URL of the cryptexes to install",
						"type": "string",
						"format": "uri-template"
					},
					"variant": {
						"description": "Variant names for the cryptexes",
						"type": "string"
					},
					"size": {
						"description": "Sizes of the compressed cryptexes",
						"type": "integer"
					},
					"sha256": {
						"description": "Hexadecimal sha256 digests of the compressed cryptexes",
						"type": "string"
					},
					"auth": {
						"description": "Authorization services used to verify cryptex validities",
						"default": "tatsu",
						"type": "string",
						"enum": ["tatsu", "diavlo", "factory", "none"]
					},
					"daw_token": {
						"description": "Daw token for authenticating with Knox when downloading and fetching decryption key for a Knox cryptex.",
						"type": "string"
					},
					"wg_username": {
						"description": "Westgate username for authenticating with Knox when downloading and fetching decryption key for a Knox cryptex. If testing at desk, you should use your AppleConnect username.",
						"type": "string"
					},
					"wg_token": {
						"description": "Westgate token for authenticating with Knox when downloading and fetching decryption key for a Knox cryptex.",
						"type": "string"
					},
					"alternate_cdn_host": {
						"description": "Alternate CDN host address to use when downloading cryptexes from Knox, i.e. the domain in the asset uri.",
						"type": "string"
					},
					"background_traffic_class": {
						"description": "Enable setting the network service type to background rather than default for Knox cryptex downloads. Set to 'true' to enable. Default is 'false'.",
						"type": "boolean"
					},
					"network-retry-count": {
						"description": "Configure the number of retries with exponential backoff for network failures such as HTTP 429 when downloading and decrypting a cryptex from Knox. The max number of retries is 15. This does not apply to authorization failures.",
						"type": "integer",
						"minimum": 0
					},
					"apple_connect": {
						"description": "Use AppleConnect(SSO) for personalization",
						"default": false,
						"type": "boolean"
					},
					"aea_decryption_params": {
						"description": "Parameters for decrypting AEA cryptexes directly from the CDN",
						"type": "object",
						"properties": {
							"aea_archive_id": {
								"description": "The expected AEA archive ID for an AEA cryptex",
								"type": "string"
							},
							"aea_decryption_key": {
								"description": "Pre-determined decryption key for an AEA cryptex",
								"type": "string"
							}
						},
						"required": ["aea_archive_id", "aea_decryption_key"]
					},
					"cacheable": {
						"description": "Enable or disable caching of this cryptex into the preboot volume. If enabled, the downloaded cryptex will persist across reboots in the cache. If unset, the downloaded cryptex will be cached by default if a valid \"sha256\" is provided, if the cryptex comes from a knox:// url, or if a valid \"aea_archive_id\" is provided.",
						"type": "boolean"
					}
				},
				"required": ["url"]
			}
		},
		"diavlo": {
			"description": "Diavlo server configuration",
			"type": "object",
			"properties": {
				"url": {
					"description": "URL to the diavlo authorization server e.g. https://diavlo.apple.com",
					"type": "string",
					"format": "uri-template"
				},
				"root_certificate": {
					"description": "PEM encoded root certificate of the the diavlo authorization server",
					"type": "string"
				},
				"apple_connect": {
					"description": "Use AppleConnect credentials to trust the diavlo authorization server",
					"type": "boolean"
				}
			}
		},
		"firewall": {
			"description": "Firewall configuration",
			"type": "object",
			"properties": {
				"rules": {
					"description": "Firewall rules",
					"type": "string"
				}
			},
			"required" : ["rules"]
		},
		"install": {
			"description": "Custom installation",
			"type": "object",
			"properties": {
				"waitForVolume": {
					"description": "Causes darwin-init to delay before executing any install steps until the specified mount point has become available",
					"type": "string"
				},
				"preflight": {
					"description": "Shell script that will be executed before the root is installed. The script will be executed using customizable shell and may include files found on mount points that may not be in the base install (such as sumac -v).",
					"type": "string"
				},
				"preflight-shell": {
					"description": "A complete path the shell that'll be used to executed preflight script. If not specified it defaults to /bin/bash. All preflights run under a shell.",
					"type": "string"
				},
				"root": {
					"description": "A root that will be passed to the darwinup command. This can be a URL. If it is a URL, it causes darwin-init to wait until the destination is reachable.",
					"type": "string"
				},
				"postflight": {
					"description": "Shell script that will be executed after the root is installed. The script will be executed using customizable shell. Script may include files that have been installed by the root.",
					"type": "string"
				},
				"postflight-shell": {
					"description": "A complete path the shell that'll be used to executed postflight script. If not specified it defaults to /bin/bash. All postflights run under a shell.",
					"type": "string"
				}
			}
		},
		"package": {
			"description": "Package installation",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"url": {
						"description": "URL of the packages to install",
						"type": "string",
						"format": "uri-template"
					}
				},
				"required": ["url"]
			}
		},
		"preferences": {
			"description": "Set preferences",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"key": {
						"description": "Preference key to update",
						"type": "string"
					},
					"value": {
						"description": "Preference value as json, use \"null\" to delete a preference."
					},
					"application_id": {
						"description": "Restrict preference domain by applicationId (default: kCFPreferencesAnyApplication)",
						"type": "string"
					},
					"username": {
						"description": "Restrict preference domain by user (default: kCFPreferencesAnyUser)",
						"type": "string"
					},
					"hostname": {
						"description": "Restrict preference domain by host (default: kCFPreferencesCurrentHost)",
						"type": "string"
					}
				},
				"required": ["key"]
			}
		},
		"result": {
			"properties": {
				"failureAction": {
					"description": "Set the trigger action for failures. Options reboot/shutdown",
					"type": "string"
				}
			}
		},
		"user": {
			"description": "User configuration",
			"type": "object",
			"properties": {
				"name": {
					"description": "Specifies the username of a user",
					"type": "string"
				},
				"uid": {
					"description": "Specifies the uid of a user",
					"type": "integer"
				},
				"gid": {
					"description": "Specifies the gid of a user",
					"type": "integer"
				},
				"password": {
					"description": "Specifies the password of the user",
					"type": "string"
				},
				"isAdmin": {
					"description": "Specifies that the user should have admin privileges",
					"type": "boolean"
				},
				"ssh_authorized_key": {
					"description": "An authorized_keys file containing at least one public key",
					"type": "string"
				},
				"passwordless_sudo": {
					"description": "Enable users of the admin group to be perform sudo operations without prompting for a password",
					"type": "boolean"
				},
				"ssh_appleconnect_auth": {
					"description": "AppleConnect principal that can be used to logging into the account using SSH",
					"type": "object",
					"properties": {
						"principals": {
							"description": "AppleConnect principal that can be used to log into the account using SSH",
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"groups": {
							"description": "AppleConnect principal that can be used to log into the account using SSH",
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				},
				"apple_authentication": {
					"description": "Memento SSH configuration",
					"type": "object",
					"properties": {
						"users": {
							"description": "UserID to fetch memento key for",
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"groups": {
							"description": "GroupID whose members to fetch memento key for",
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"ldap-server": {
							"description": "LDAP server to fetch memento key from. Defaults to nod.apple.com",
							"type": "string"
						}
					}
				}
			},
			"required": ["name", "uid", "gid"]
		},
		"log": {
			"description": "Custom logging preferences",
			"type": "object",
			"properties": {
				"system-log-privacy-level": {
					"description": "Set the system log privacy level to one of 'Public', 'Private', or 'Sensitive'. Note: this will persist across reboots.",
					"type": "string",
					"enum": ["Public", "Private", "Sensitive"]
				},
				"system-logging-enabled": {
					"description": "Enable or disable system logging by setting to 'true' or 'false'.",
					"type": "boolean"
				}
			}
		},
		"tailspin": {
			"description": "Configuration for tailspin. Tailspin is disable by default on all darwinOS platforms.",
			"type": "object",
			"properties": {
				"configuration_options": {
					"description": "Custom configuration options for tailspin",
					"type": "object",
					"properties": {
						"full_sampling_period_set": {
							"description": "The full-system sampling period in nanoseconds.  To disable full-system sampling, specify zero. Sets the full-system sampling period attribute on a tailspin config object. The minimum sampling frequency for full sampling is 10ms on x86_64, 50ms on arm64 and 100ms on arm. It is an error to specify a full-system sampling period less than the minimum, unless you specify zero.",
							"type": "uint64_t"
						},
						"oncore_sampling_period_set": {
							"description": "The on-core sampling period in nanoseconds.  To disable on-core sampling, specify zero. Sets the on-core sampling period attribute on a tailspin config object. The minimum sampling frequency for oncore sampling is 10ms on x86_64, and 20ms on arm64 and 50ms on arm. It is an error to specify an oncore sampling frequency lower than the minimum, unless you specify zero.",
							"type": "uint64_t"
						},
						"buffer_size_set": {
							"description": "The buffer size in megabytes.  Must be greater than zero. Sets the buffer size attribute on a tailspin config object.",
							"type": "size_t"
						},
						"class_configs": {
							"description": "Each class should be specified in a separate array entry.",
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"class_number": {
										"description": "The class number to enable or disable.",
										"type": "uint8_t"
									},
									"class_enabled": {
										"description": " A boolean value specifying whether to enable or disable the specified class. Specify true to enable the class or false to disable the class.",
										"type": "boolean"
									},
									"subclass_configs": {
										"description": "Each subclass should be specified in a separate array entry.",
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"subclass_number": {
													"description": "The subclass number to enable or disable.",
													"type": "uint8_t"
												},
												"subclass_enabled": {
													"description": "A boolean value specifying whether to enable or disable the  specified subclass. Specify true to enable the subclass or false to disable the subclass.",
													"type": "boolean"
												},
												"required": ["subclass_number","subclass_enabled"]
											}
										}
									},
									"required": ["class_number","class_enabled"]
								}
							}
						}
					},
					"tailspin_enabled": {
					 "description": "Enable or disable tailspin daemon by setting to 'true' or 'false'.",
					 "type": "boolean"
					},
					"required": ["tailspin_enabled"]
				}
			}
		},
		"network": {
			"description": "Set network configuration",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"interface": {
						"description": "Name of interface to configure",
						"type": "string"
					},
					"value": {
						"description": "Network configuration for the specified network interface given as a json",
						"type": "object"
					}
				}
			}
		},
		"network-uplink-mtu": {
			"description": "Set the Maxmimum Transmission Unit (MTU) of the uplink",
			"type": "integer",
			"minimum": 1280,
			"maximum": 16384
		},
		"narrative-identities": {
			"description": "Configure narrative identities",
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"identity": {
						"description": "Narrative Identity of format <domain>-<identitytype> to configure. Supported Identities are adb-platform, adb-host, acdc-actor, example-platform, example-host, example-actor",
						"type": "string",
						"enum": ["adb-platform", "adb-host", "acdc-actor", "example-platform", "example-host", "example-actor"]
					},
					"options": {
						"description": "Options specific to the narrative identity.",
						"type": "object"
					}
				}
			}
		},
		"logtext": {
			"description": "A message to be placed in the log",
			"type": "string"
		},
		"compname": {
			"description": "Custom device computer name used in user displays and used by bonjour.",
			"type": "string"
		},
		"hostname": {
			"description": "Custom device hostname.",
			"type": "string"
		},
		"fqdn": {
			"description": "Custom device hostname.",
			"type": "string"
		},
		"computer-name": {
			"description": "Custom device computer name used in user displays and used by bonjour.",
			"type": "string"
		},
		"host-name": {
			"description": "Custom device hostname.",
			"type": "string"
		},
		"local-host-name": {
			"description": "Custom device local hostname used by bonjour.",
			"type": "string"
		},
		"perfdata": {
			"description": "Collect performance data at boot",
			"type": "boolean"
		},
		"issue-dcrt": {
			"description": "Issue DCRT hardware attestation certificate at boot",
			"type": "boolean"
		},
		"ssh": {
			"description": "Enable SSH daemon",
			"type": "boolean"
		},
		"ssh_pwauth": {
			"description": "Enable SSH password authentication",
			"type": "boolean"
		},
		"reboot": {
			"description": "Reboot the machine after the preflight, root install, and postflight",
			"type": "boolean"
		},
		"cryptex-download-bandwidth-limit": {
			"description": "Configure the input bandwidth limit on the Mellanox interface in bits per second. The limit will be set immediately before cryptexes are downloaded and unset immediately after. Intended only for J236.",
			"type": "integer"
		},
		"lock-cryptexes": {
			"description": "Lock cryptex sealed software hash registers after installing cryptexes, preventing further loading of cryptexes. This behavior is implied when \"userspace-reboot\" is set to \"rem\".",
			"type": "boolean"
		},
		"userspace-reboot": {
			"description": "Reboot userspace after preflight, root install, and postflight. Use \"rem\" for Restricted Execution Mode. Use \"rem-dev\" for Restricted Execution Mode without blowing the fuse that enforces trust cache REM policy. This fuse state is attested to, so \"rem-dev\" is not useful in production deployments. Use an empty string (\"\") or \"none\" to disable userspace reboots on systems where it is the default.",
			"type": "string",
			"enum": ["none", "", "rem", "rem-dev"]
		},
		"pre-init-cmds": {
			"description": "Specify one or more scripts to execute in bash before all other darwin-init operations.",
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"pre-init-critical": {
			"description": "Pre-init commands will be treated as system critical. If any one fails, darwin-init will stop and fail immediately without performing the remaining config.",
			"type": "boolean"
		},
		"secure-config": {
			"description": "SecureConfigParameters registered with secureconfigd. Applied only during the boot invocation of darwin-init.",
			"type": "object"
		},
		"config-security-policy": {
			"description": "Policy for security and privacy validation of the darwin-init config. If not set, no security/privacy validation is performed. Included in the attestation bundle.",
			"type": "string",
			"enum": ["customer", "carry"]
		},
		"diagnostics-submission-enabled": {
			"description": "Enables diagnostics submission. Defaults to true, if unset.",
			"type": "boolean"
		},
		"config-security-policy-version": {
			"description": "Version number to use when validating darwin-init config against the config-security-policy. Each time new policy enforcement logic is deployed for a darwin-init key, we will increment the version number. Clients may override this and use an older version so that they only receive a warning but can still apply their config.",
			"type": "integer"
		}
	}
}
