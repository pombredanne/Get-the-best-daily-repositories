// Copyright © 2024 Apple Inc. All Rights Reserved.

// APPLE INC.
// PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT
// PLEASE READ THE FOLLOWING PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT (“AGREEMENT”) CAREFULLY BEFORE DOWNLOADING OR USING THE APPLE SOFTWARE ACCOMPANYING THIS AGREEMENT(AS DEFINED BELOW). BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING TO BE BOUND BY THE TERMS OF THIS AGREEMENT. IF YOU DO NOT AGREE TO THE TERMS OF THIS AGREEMENT, DO NOT DOWNLOAD OR USE THE APPLE SOFTWARE. THESE TERMS AND CONDITIONS CONSTITUTE A LEGAL AGREEMENT BETWEEN YOU AND APPLE.
// IMPORTANT NOTE: BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING ON YOUR OWN BEHALF AND/OR ON BEHALF OF YOUR COMPANY OR ORGANIZATION TO THE TERMS OF THIS AGREEMENT.
// 1. As used in this Agreement, the term “Apple Software” collectively means and includes all of the Apple Private Cloud Compute materials provided by Apple here, including but not limited to the Apple Private Cloud Compute software, tools, data, files, frameworks, libraries, documentation, logs and other Apple-created materials. In consideration for your agreement to abide by the following terms, conditioned upon your compliance with these terms and subject to these terms, Apple grants you, for a period of ninety (90) days from the date you download the Apple Software, a limited, non-exclusive, non-sublicensable license under Apple’s copyrights in the Apple Software to download, install, compile and run the Apple Software internally within your organization only on a single Apple-branded computer you own or control, for the sole purpose of verifying the security and privacy characteristics of Apple Private Cloud Compute. This Agreement does not allow the Apple Software to exist on more than one Apple-branded computer at a time, and you may not distribute or make the Apple Software available over a network where it could be used by multiple devices at the same time. You may not, directly or indirectly, redistribute the Apple Software or any portions thereof. The Apple Software is only licensed and intended for use as expressly stated above and may not be used for other purposes or in other contexts without Apple's prior written permission. Except as expressly stated in this notice, no other rights or licenses, express or implied, are granted by Apple herein.
// 2. The Apple Software is provided by Apple on an "AS IS" basis. APPLE MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS, SYSTEMS, OR SERVICES. APPLE DOES NOT WARRANT THAT THE APPLE SOFTWARE WILL MEET YOUR REQUIREMENTS, THAT THE OPERATION OF THE APPLE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, THAT DEFECTS IN THE APPLE SOFTWARE WILL BE CORRECTED, OR THAT THE APPLE SOFTWARE WILL BE COMPATIBLE WITH FUTURE APPLE PRODUCTS, SOFTWARE OR SERVICES. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY APPLE OR AN APPLE AUTHORIZED REPRESENTATIVE WILL CREATE A WARRANTY.
// 3. IN NO EVENT SHALL APPLE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, COMPILATION OR OPERATION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 4. This Agreement is effective until terminated. Your rights under this Agreement will terminate automatically without notice from Apple if you fail to comply with any term(s) of this Agreement. Upon termination, you agree to cease all use of the Apple Software and destroy all copies, full or partial, of the Apple Software. This Agreement constitutes the entire understanding of the parties with respect to the subject matter contained herein, and supersedes all prior negotiations, representations, or understandings, written or oral. This Agreement will be governed and construed in accordance with the laws of the State of California, without regard to its choice of law rules.
// You may report security issues about Apple products to product-security@apple.com, as described here: https://www.apple.com/support/security/. Non-security bugs and enhancement requests can be made via https://bugreport.apple.com as described here: https://developer.apple.com/bug-reporting/
// EA1937
// 10/02/2024

// Modified removing unnecessary information from:
// https://github.pie.apple.com/CAE/edge-proto/blob/main/proto/src/main/proto/keyrotationservice/keyrotationapi.proto

syntax = "proto3";

import "google/protobuf/timestamp.proto";

/*
 Fetch Delivery is intended for serial Request & Response flow. Service Client using Unary Delivery is expected to refresh
 its Request every 15 minutes
 */
service AssetDelivery {
  rpc FetchDelivery(AssetRequest) returns (AssetResponse) {}
}

enum AssetType{
  KEY_PAIR            = 0;
  PUBLIC_KEY          = 1;
}

message AssetRequest {
  /**
  {use_case, asset_type} tuple uniquely identify the asset.
  - use_case is an identifier that describes what this asset is intended to be used for.
  - asset_type in combination with Service Client's identity and use_case will go through authorization check.
   **/
  string use_case                 = 1;    // [Required] Identifier for usage. Enum {"thimble_ott", "thimble_tgt", "thimble_ohttp"}
  AssetType asset_type            = 2;    // [Required] See {@code AssetType} enum

  // ====== Server Internal Use Only (Client Identity from Client's Certificates). ======
  // Service Client should ignore this field
  // gRPC ServerInterceptor in Key Rotation Service extracts identities from client certificate and pass it to
  // application level. This is the only way to pass the information.
  repeated string identities      = 16;
}

message AssetResponse {
  oneof result {
    Assets assets                 = 1;
    Error error                   = 2;
  }
}

message Assets {
  repeated AssetBundle asset_bundle = 1;
}

message AssetBundle {
  oneof asset {
    KeyPairAsset key_pair                   = 1;
    PublicKeyAsset public_key               = 2;
  }
  google.protobuf.Timestamp asset_valid_start_timestamp = 5;   // [Required] Start timestamp of Asset's validity.
  google.protobuf.Timestamp asset_valid_end_timestamp   = 6;   // [Required] Timestamp of Asset's expiry.
}

enum ErrorCode {
  Reserved            = 0;

  // 4xx
  BadRequest          = 400;  // Missing required fields in Request
  Unauthorized        = 401;  // Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
  Forbidden           = 403;  // For mTLS entitlement for Service Client does not allow access to the asset being requested
  NotFound            = 404;  // No key match the time duration given
  MethodNotAllowed    = 405;  // use_case or asset_type is not allowed
  RequestTimeout      = 408;  // Key storage is reachable, but Key Rotation timed out in storage Read operation
  TooManyRequests     = 429;  // Client is sending too many requests, signal it to slow down

  // 5xx
  InternalServerError = 500;  // Unexpected inconsistency. Key Rotation is running, but fail to process or fetch assets
  ServiceUnavailable  = 503;  // Unexpected inconsistency. Key Rotation is shutting down. Go away.
}

message Error {
  ErrorCode error_code  = 1;      // [Required] Failure code
  string reason         = 2;      // [Optional] Failure reason for debug purpose
}

message KeyPairAsset {
  bytes publicKey   = 1;
  bytes privateKey  = 2;  // For Service Client interface, it is decrypted plain format. For BlobStore storage, it is encrypted format with IV embedded.
}

message PublicKeyAsset {
  bytes publicKey   = 1;
}
