// Copyright © 2024 Apple Inc. All Rights Reserved.

// APPLE INC.
// PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT
// PLEASE READ THE FOLLOWING PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT (“AGREEMENT”) CAREFULLY BEFORE DOWNLOADING OR USING THE APPLE SOFTWARE ACCOMPANYING THIS AGREEMENT(AS DEFINED BELOW). BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING TO BE BOUND BY THE TERMS OF THIS AGREEMENT. IF YOU DO NOT AGREE TO THE TERMS OF THIS AGREEMENT, DO NOT DOWNLOAD OR USE THE APPLE SOFTWARE. THESE TERMS AND CONDITIONS CONSTITUTE A LEGAL AGREEMENT BETWEEN YOU AND APPLE.
// IMPORTANT NOTE: BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING ON YOUR OWN BEHALF AND/OR ON BEHALF OF YOUR COMPANY OR ORGANIZATION TO THE TERMS OF THIS AGREEMENT.
// 1. As used in this Agreement, the term “Apple Software” collectively means and includes all of the Apple Private Cloud Compute materials provided by Apple here, including but not limited to the Apple Private Cloud Compute software, tools, data, files, frameworks, libraries, documentation, logs and other Apple-created materials. In consideration for your agreement to abide by the following terms, conditioned upon your compliance with these terms and subject to these terms, Apple grants you, for a period of ninety (90) days from the date you download the Apple Software, a limited, non-exclusive, non-sublicensable license under Apple’s copyrights in the Apple Software to download, install, compile and run the Apple Software internally within your organization only on a single Apple-branded computer you own or control, for the sole purpose of verifying the security and privacy characteristics of Apple Private Cloud Compute. This Agreement does not allow the Apple Software to exist on more than one Apple-branded computer at a time, and you may not distribute or make the Apple Software available over a network where it could be used by multiple devices at the same time. You may not, directly or indirectly, redistribute the Apple Software or any portions thereof. The Apple Software is only licensed and intended for use as expressly stated above and may not be used for other purposes or in other contexts without Apple's prior written permission. Except as expressly stated in this notice, no other rights or licenses, express or implied, are granted by Apple herein.
// 2. The Apple Software is provided by Apple on an "AS IS" basis. APPLE MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS, SYSTEMS, OR SERVICES. APPLE DOES NOT WARRANT THAT THE APPLE SOFTWARE WILL MEET YOUR REQUIREMENTS, THAT THE OPERATION OF THE APPLE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, THAT DEFECTS IN THE APPLE SOFTWARE WILL BE CORRECTED, OR THAT THE APPLE SOFTWARE WILL BE COMPATIBLE WITH FUTURE APPLE PRODUCTS, SOFTWARE OR SERVICES. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY APPLE OR AN APPLE AUTHORIZED REPRESENTATIVE WILL CREATE A WARRANTY.
// 3. IN NO EVENT SHALL APPLE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, COMPILATION OR OPERATION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 4. This Agreement is effective until terminated. Your rights under this Agreement will terminate automatically without notice from Apple if you fail to comply with any term(s) of this Agreement. Upon termination, you agree to cease all use of the Apple Software and destroy all copies, full or partial, of the Apple Software. This Agreement constitutes the entire understanding of the parties with respect to the subject matter contained herein, and supersedes all prior negotiations, representations, or understandings, written or oral. This Agreement will be governed and construed in accordance with the laws of the State of California, without regard to its choice of law rules.
// You may report security issues about Apple products to product-security@apple.com, as described here: https://www.apple.com/support/security/. Non-security bugs and enhancement requests can be made via https://bugreport.apple.com as described here: https://developer.apple.com/bug-reporting/
// EA1937
// 10/02/2024

//  Copyright © 2024 Apple, Inc. All rights reserved.
//
syntax = "proto3";
option swift_prefix = "TxPB_";

option java_multiple_files = true;
option java_package = "com.apple.keyt.api";
option java_outer_classname = "KTClientProto";

import "Transparency.proto";

// Protobuf definitions for common client interface without personality-specific data
// These APIs are used by several interfaces (for now, audit and device client)


// ============================ ConsistencyProof RPC =========================== //
// Get a consistency proofs between log revisions. The proof efficiently demonstrates that all
// records in the tree at the first revision are still in the tree at the later revision.

message ConsistencyProofRequest {
    ProtocolVersion version = 1;
    repeated LogConsistencyRequest requests = 2;
    LogType logType = 3;
    Application application = 4;   // If logType is not TopLevelTree, provide an application
    string requestUuid = 5; // Used for logging, not expected when uuid is passed in headers

    message LogConsistencyRequest {
        // V2: moved logType = 1 and application = 2 out of LogConsistencyRequest
        uint64          startRevision = 3; // Required, must be >= 0
        uint64          endRevision = 4;   // Required, must be > startRevision
    }
}

// Note: the server may, at its discretion, return multiple LogConsistencyResponses for a single LogConsistencyRequest.
// For example, if a client requests a proof from revision 51 to 130, the server may return a consistency
// proof of [51,130], or multiple adjoining proofs, like [51, 100], [100, 120], [120, 130].
//
// The server may omit proofs (such as when too many are requested), the client should record the
// returned proofs and make a new request for the unfulfilled proofs.
message ConsistencyProofResponse {
    Status status = 1;
    // 2 - can reuse
    // these will be sorted by logId, start revision, end revision
    repeated LogConsistencyResponse responses = 3;
    LogType         logType = 4;
    Application     application = 5; // If logType is not TopLevelTree, provide an application

    // Individual consistency proofs, which can be linked to prove larger ranges
    message LogConsistencyResponse {
        // V2: moved logType = 1 and application = 2 out of LogConsistencyResponse
        SignedObject startSLH = 3;
        SignedObject endSLH = 4;
        repeated bytes proofHashes = 5;
    }
}


// ============================ Pat/TltInclusionProof RPC =========================== //
// Get inclusion proofs for PAM heads in the PAT and PAT heads in the TLT.

message RevisionLogInclusionProofRequest {
    ProtocolVersion version = 1;
    Application application = 2;
    LogType logType = 3; // Type of log in which to lookup leaves, either PAT or TLT

    // If logType is PAT, revisions will be from PAM. If logType is TLT, revisions will be from PAT.
    repeated uint64 revision = 4;
}

// The server may omit proofs (such as when too many are requested), the client should record the
// returned proofs and make a new request for the unfulfilled proofs.
message RevisionLogInclusionProofResponse {
    Status status = 1; // OK, INVALID_REQUEST, or INTERNAL_ERROR

    // not guaranteed to have every requested proof
    // all these proofs will be under the same log head, sorted by leaf index
    repeated LogEntry logEntry = 4;
    // if logEntries contains PAT proofs, this will be proof of the PAT head in the TLT, may be absent
    LogEntry topLevelTreeEntry = 5;
}


// ============================ Public Keys RPC =========================== //
// Get public keys and certificates used to verify VRF proofs, signed tree heads, and SMTs.

// When making requests over HTTP the body can be omitted.  Instead, the Application should
// be specified in the "x-apple-application" header using the numeric value, and the version
// specified in the "x-protocol-version" header using the enum value.
// Version 2, iMessage would be indicated with:
// x-apple-application: 1
// x-protocol-version: V2
message PublicKeysRequest {
    ProtocolVersion version = 1;
    Application application = 2;
    string requestUuid = 3; // Used for logging, not expected when uuid is passed in headers
}

message PublicKeysResponse {
    Status status = 1;
    // DER-encoded SMT and STH signing certificate(s) for the application's trees.
    repeated bytes appLeafs = 2;
    // DER-encoded STH signing certificate(s) for the TLT.
    repeated bytes tltLeafs = 3;
    // DER-encoded intermediate certificate(s).
    repeated bytes intermediates = 4;
    // V2 removed: vrfKey = 5, vrfSignature = 6, vrfPublicKey = 7, tltBeginningMs = 8

    // inclusion proof of the PerApplicationTreeConfigNode
    // Contains VRF public key, public key for signing roots of all trees for this app, and minimum version supported by these trees
    // For Private Cloud Compute PATs, the config node uses the same protocol messages but does not include the VRF public key
    PatInclusionProof patConfigProof = 9;
    // inclusion proof of the TopLevelTreeConfigNode
    // Contains public key for signing roots of top-level tree and minimum version supported by the TLT
    LogEntry tltConfigProof = 10;
    // Inclusion proof of PatClosedNode of the last PAT that supported this ProtocolVersion.
    // Only present if this ProtocolVersion is no longer supported.
    // The patConfigProof will be from the same tree, tltConfigProof will be for the TLT with
    // this PAT's heads, and certificates will be for this set of trees
    PatInclusionProof patClosedProof = 11;
    // Optional URL to information about tree roll or obsoletion.
    // Displayed by the client in the notification when the roll is detected.
    string treeRollInfoUrl = 12;

    // Proof of a recent PAM head in the PAT, used to check populating state
    // Optional unless the PAM is still populating
    // Uses the same PAT root as patConfigProof
    LogEntry pamHeadInPatProof = 13;

    // DER-encoded STH signing certificate(s) for old tree root signing certs. PCC only, optional.
    repeated bytes oldAppRootCerts = 14;
    repeated bytes oldTltRootCerts = 15;
}

