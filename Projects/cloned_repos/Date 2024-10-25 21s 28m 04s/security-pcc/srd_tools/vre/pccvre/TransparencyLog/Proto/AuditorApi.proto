// Copyright © 2024 Apple Inc. All Rights Reserved.

// APPLE INC.
// PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT
// PLEASE READ THE FOLLOWING PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT (“AGREEMENT”) CAREFULLY BEFORE DOWNLOADING OR USING THE APPLE SOFTWARE ACCOMPANYING THIS AGREEMENT(AS DEFINED BELOW). BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING TO BE BOUND BY THE TERMS OF THIS AGREEMENT. IF YOU DO NOT AGREE TO THE TERMS OF THIS AGREEMENT, DO NOT DOWNLOAD OR USE THE APPLE SOFTWARE. THESE TERMS AND CONDITIONS CONSTITUTE A LEGAL AGREEMENT BETWEEN YOU AND APPLE.
// IMPORTANT NOTE: BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING ON YOUR OWN BEHALF AND/OR ON BEHALF OF YOUR COMPANY OR ORGANIZATION TO THE TERMS OF THIS AGREEMENT.
// 1. As used in this Agreement, the term “Apple Software” collectively means and includes all of the Apple Private Cloud Compute materials provided by Apple here, including but not limited to the Apple Private Cloud Compute software, tools, data, files, frameworks, libraries, documentation, logs and other Apple-created materials. In consideration for your agreement to abide by the following terms, conditioned upon your compliance with these terms and subject to these terms, Apple grants you, for a period of ninety (90) days from the date you download the Apple Software, a limited, non-exclusive, non-sublicensable license under Apple’s copyrights in the Apple Software to download, install, compile and run the Apple Software internally within your organization only on a single Apple-branded computer you own or control, for the sole purpose of verifying the security and privacy characteristics of Apple Private Cloud Compute. This Agreement does not allow the Apple Software to exist on more than one Apple-branded computer at a time, and you may not distribute or make the Apple Software available over a network where it could be used by multiple devices at the same time. You may not, directly or indirectly, redistribute the Apple Software or any portions thereof. The Apple Software is only licensed and intended for use as expressly stated above and may not be used for other purposes or in other contexts without Apple's prior written permission. Except as expressly stated in this notice, no other rights or licenses, express or implied, are granted by Apple herein.
// 2. The Apple Software is provided by Apple on an "AS IS" basis. APPLE MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS, SYSTEMS, OR SERVICES. APPLE DOES NOT WARRANT THAT THE APPLE SOFTWARE WILL MEET YOUR REQUIREMENTS, THAT THE OPERATION OF THE APPLE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, THAT DEFECTS IN THE APPLE SOFTWARE WILL BE CORRECTED, OR THAT THE APPLE SOFTWARE WILL BE COMPATIBLE WITH FUTURE APPLE PRODUCTS, SOFTWARE OR SERVICES. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY APPLE OR AN APPLE AUTHORIZED REPRESENTATIVE WILL CREATE A WARRANTY.
// 3. IN NO EVENT SHALL APPLE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, COMPILATION OR OPERATION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 4. This Agreement is effective until terminated. Your rights under this Agreement will terminate automatically without notice from Apple if you fail to comply with any term(s) of this Agreement. Upon termination, you agree to cease all use of the Apple Software and destroy all copies, full or partial, of the Apple Software. This Agreement constitutes the entire understanding of the parties with respect to the subject matter contained herein, and supersedes all prior negotiations, representations, or understandings, written or oral. This Agreement will be governed and construed in accordance with the laws of the State of California, without regard to its choice of law rules.
// You may report security issues about Apple products to product-security@apple.com, as described here: https://www.apple.com/support/security/. Non-security bugs and enhancement requests can be made via https://bugreport.apple.com as described here: https://developer.apple.com/bug-reporting/
// EA1937
// 10/02/2024

//  Copyright © 2024 Apple, Inc. All rights reserved.
//
syntax = "proto3";
option swift_prefix = "TxPB_";

option java_multiple_files = true;
option java_package = "com.apple.keyt.api";
option java_outer_classname = "AuditProto";

import "Transparency.proto";
import "KtClientApi.proto";

// Preliminary protobuf definitions for the Audit client interface
// Note that parts the Audit API shared with the device API are defined in ktClientApi.proto


// gRPC definitions for audit service
service KtAuditorApi {

    rpc auditConsistencyProof(ConsistencyProofRequest) returns (ConsistencyProofResponse);

    rpc auditPublicKeys(PublicKeysRequest) returns (PublicKeysResponse);

    rpc listTrees(ListTreesRequest) returns (ListTreesResponse);

    rpc logLeaves(LogLeavesRequest) returns (LogLeavesResponse);

    rpc logLeavesForRevision(LogLeavesForRevisionRequest) returns (LogLeavesForRevisionResponse);

    rpc logHead(LogHeadRequest) returns (LogHeadResponse);

    rpc mapHead(MapHeadRequest) returns (MapHeadResponse);

    rpc mapNode(MapNodeRequest) returns (MapNodeResponse);

    rpc paclInclusionProof(PaclInclusionProofRequest) returns (PaclInclusionProofResponse);
}

// ============================ List Trees RPC ====================================== //

message ListTreesRequest {
    ProtocolVersion version = 1;
    string requestUuid      = 2; // Used for logging
}

message ListTreesResponse {
   Status        status = 1;
   repeated Tree trees  = 2;

    message Tree {
        uint64      treeId           = 1;
        uint64      logBeginningMs   = 2;
        oneof Type {
            LogType logType = 3;
            MapType mapType = 4;
        }
        Application application      = 5; // will be null if LogType is Top-level Tree
        State       state            = 6;
        uint64      mergeGroups      = 7; // only present for Logs
        bytes       publicKeyBytes   = 8; // public key for signing roots of all trees for this app, encoded in DER SPKI

        enum State {
            UNKNOWN = 0;
            STAGED  = 1;
            ACTIVE  = 2;
            RETIRED = 3;
        }
    }
}

// ============================ Log Leaves RPC ====================================== //

message LogLeavesRequest {
    ProtocolVersion version     = 1;
    uint64          treeId      = 2;
    // 3 -- can reuse
    uint64          startIndex  = 4;
    uint64          endIndex    = 5; // Exclusive
    string requestUuid = 6; // Used for logging
    uint32 startMergeGroup = 7;
    uint32 endMergeGroup   = 8;
}

message LogLeavesResponse {
    // Return NOT_FOUND if any leaves in requested range do not exist.
    // Return INVALID_REQUEST if merge group range is invalid
    Status        status = 1;
    // 2 - can reuse
    repeated Leaf leaves = 3;

    message Leaf {
        NodeType nodeType = 1;
        bytes  nodeBytes = 2; // parse as appropriate for nodeType
        uint64 index     = 3; // 0-indexed
        uint32 mergeGroup = 4;
        bytes rawData = 5; // only for AT leaves
        bytes metadata = 6; // only for AT leaves
    }
}

// ============================ Log Leaves For Revision RPC ====================================== //
// Get all leaves, with inclusion proofs, added in the requested log revision.
// PACL not supported for this RPC because revisions may contain massive numbers of leaves. Use "Log Leaves" RPC instead.
// Revision 0 contains no leaves. Every subsequent revision adds at least one new leaf to the log tree.

message LogLeavesForRevisionRequest {
    ProtocolVersion version     = 1;
    LogType         logType     = 2; // must be PER_APPLICATION_TREE or TOP_LEVEL_TREE
    Application     application = 3;
    uint64          revision    = 4; // Set to -1 to request latest revision
    string requestUuid = 5; // Used for logging
}

message LogLeavesForRevisionResponse {
    Status        status = 1; // Returns NOT_FOUND if revision does not exist.
    SignedObject  slh    = 2; // for requested revision. Inclusion proofs will use this root.
    repeated Leaf leaves = 3; // not guaranteed to be in order.

    message Leaf {
        NodeType nodeType   = 1;
        bytes  nodeBytes    = 2; // parse as appropriate for nodeType
        uint64 nodePosition = 3; // in range [0, slh.logSize)
        repeated bytes hashesOfPeersInPathToRoot = 4; // Path to slh above. Ordered with leaf at 0, root-1 at end
        bytes rawData = 5; // only for AT leaves
        bytes metadata = 6; // only for AT leaves
    }
}

// ============================ Log Head RPC ====================================== //

message LogHeadRequest {
    ProtocolVersion version     = 1;
    uint64          treeId      = 2;
    // 3 -- can reuse
    int64           revision    = 4; // Set to -1 to request latest revision
    string requestUuid = 5; // Used for logging
}

message LogHeadResponse {
    Status       status      = 1;
    SignedObject logHead     = 4;
}

// ============================ Map Head RPC ====================================== //

message MapHeadRequest {
    ProtocolVersion version     = 1;
    uint64          treeId      = 2;
    // 3 -- can reuse
    int64           revision    = 4; // Set to -1 to request latest revision
    string requestUuid = 5; // Used for logging
}

message MapHeadResponse {
    Status       status = 1;
    SignedObject smh    = 2;
}

// ============================ MapNode RPC ====================================== //
// Get the hash value for a given map node (either leaf or internal).

message MapNodeRequest {
    ProtocolVersion version     = 1;
    uint64          treeId      = 2;
    // 3 -- can reuse
    bytes           path        = 4; // Must have at least depth bits, may be longer
    uint32          depth       = 5; // Top-down: 0 is root level, 255 is leaf level
    // Request for revision 'i' will return version of node with highest revision less than or equal to 'i'
    uint64          revision    = 6;
    string requestUuid = 7; // Used for logging
}

message MapNodeResponse {
    // Return NOT_FOUND if requested node does not exist in map for specified revision
    Status status = 1;
    bytes  hash   = 2;
    bytes  value  = 3; // only present if this is a leaf node
}


// ============================ PACL Inclusion Proof RPC =========================== //
// Get inclusion proofs for SMTs in the PACL.

message PaclInclusionProofRequest {
    ProtocolVersion version = 1;
    Application application = 2;

    repeated SignedObject smts = 3;
    string requestUuid = 4; // Used for logging
}

message PaclInclusionProofResponse {
    Status status = 1; // OK, INVALID_REQUEST, or INTERNAL_ERROR

    // not guaranteed to have every requested proof
    // all these proofs will be under the same log head, sorted by leaf index
    // nodes will all be ChangeLogNode
    
    repeated LogEntry logEntry = 2;
}
