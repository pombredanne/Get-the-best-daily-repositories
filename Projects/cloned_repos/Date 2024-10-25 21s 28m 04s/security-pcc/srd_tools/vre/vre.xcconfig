// Versioning

// RC_ProjectSourceVersion unless it's unset, falling back to VRE_BUILD_VERSION_NONE
VRE_BUILD_VERSION = $(VRE_BUILD_VERSION_$(VRE_BUILD_VERSION_SUFFIX_$(RC_ProjectSourceVersion)))

VRE_BUILD_VERSION = $(RC_ProjectSourceVersion)
VRE_BUILD_VERSION_SUFFIX_ = NONE

// A high default value for when CURRENT_PROJECT_VERSION is unset (running `~rc/bin/buildit` with no version specified)
VRE_BUILD_VERSION_NONE = 60000

CURRENT_PROJECT_VERSION = $(VRE_BUILD_VERSION)
DYLIB_CURRENT_VERSION = $(VRE_BUILD_VERSION)
MODULE_VERSION = $(VRE_BUILD_VERSION)


// Sensible defaults

ARCHS = $(ARCHS_STANDARD)
ONLY_ACTIVE_ARCH = NO
ONLY_ACTIVE_ARCH[config=Debug] = YES
ENABLE_TESTABILITY[config=Debug] = YES
ALWAYS_SEARCH_USER_PATHS = NO
USE_HEADERMAP = NO
INFOPLIST_PREPROCESS = YES
STRIP_INSTALLED_PRODUCT[config=Debug][sdk=*] = NO
OTHER_CFLAGS = -fverbose-asm
SUPPORTS_TEXT_BASED_API = YES
CODE_SIGN_IDENTITY = -
PRODUCT_NAME = UNKNOWN
DEAD_CODE_STRIPPING = YES

SDKROOT = macosx.internal
SUPPORTED_PLATFORMS = macosx

// For Swift

ENABLE_TESTABILITY[config=Debug*] = YES
CLANG_ENABLE_MODULES = YES
SWIFT_OPTIMIZATION_LEVEL[config=Debug*] = -Onone
SWIFT_COMPILATION_MODE[config=Release*] = wholemodule
SWIFT_INSTALL_OBJC_HEADER = NO
LINK_WITH_STANDARD_LIBRARIES = YES

SWIFT_VERSION = 5.10

// Compiler options

GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS[config=Debug] = DEBUG=1
GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS[config=Release] = NDEBUG=1

GCC_C_LANGUAGE_STANDARD = gnu11
CLANG_CXX_LANGUAGE_STANDARD = gnu++11
GCC_OPTIMIZATION_LEVEL = s
GCC_OPTIMIZATION_LEVEL[config=Debug] = 0
CLANG_ENABLE_OBJC_ARC = YES
CLANG_LINK_OBJC_RUNTIME = NO
ENABLE_STRICT_OBJC_MSGSEND = YES
GCC_ENABLE_BUILTIN_FUNCTIONS = YES
GCC_ENABLE_CPP_EXCEPTIONS = NO
GCC_ENABLE_PASCAL_STRINGS = NO
GCC_NO_COMMON_BLOCKS = YES
GCC_STRICT_ALIASING = YES
GCC_SYMBOLS_PRIVATE_EXTERN = YES

// Module checking

ENABLE_MODULE_VERIFIER = YES;
MODULE_VERIFIER_SUPPORTED_LANGUAGE_STANDARDS = gnu17 gnu++14
MODULE_VERIFIER_SUPPORTED_LANGUAGES = objective-c objective-c++

// Static analyzer

CLANG_ANALYZER_DEADCODE_DEADSTORES = YES
CLANG_ANALYZER_GCD = YES
CLANG_ANALYZER_MEMORY_MANAGEMENT = YES
CLANG_ANALYZER_NONNULL = YES
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK = YES
CLANG_ANALYZER_SECURITY_KEYCHAIN_API = YES

// x86 support

EXCLUDED_SOURCE_FILE_NAMES[arch=arm*] = *x86.*
EXCLUDED_SOURCE_FILE_NAMES[arch=x86_64] = *.*
INCLUDED_SOURCE_FILE_NAMES[arch=x86_64] = *x86.*
