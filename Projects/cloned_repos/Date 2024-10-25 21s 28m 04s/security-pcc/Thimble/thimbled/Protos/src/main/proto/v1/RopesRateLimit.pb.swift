// Copyright © 2024 Apple Inc. All Rights Reserved.

// APPLE INC.
// PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT
// PLEASE READ THE FOLLOWING PRIVATE CLOUD COMPUTE SOURCE CODE INTERNAL USE LICENSE AGREEMENT (“AGREEMENT”) CAREFULLY BEFORE DOWNLOADING OR USING THE APPLE SOFTWARE ACCOMPANYING THIS AGREEMENT(AS DEFINED BELOW). BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING TO BE BOUND BY THE TERMS OF THIS AGREEMENT. IF YOU DO NOT AGREE TO THE TERMS OF THIS AGREEMENT, DO NOT DOWNLOAD OR USE THE APPLE SOFTWARE. THESE TERMS AND CONDITIONS CONSTITUTE A LEGAL AGREEMENT BETWEEN YOU AND APPLE.
// IMPORTANT NOTE: BY DOWNLOADING OR USING THE APPLE SOFTWARE, YOU ARE AGREEING ON YOUR OWN BEHALF AND/OR ON BEHALF OF YOUR COMPANY OR ORGANIZATION TO THE TERMS OF THIS AGREEMENT.
// 1. As used in this Agreement, the term “Apple Software” collectively means and includes all of the Apple Private Cloud Compute materials provided by Apple here, including but not limited to the Apple Private Cloud Compute software, tools, data, files, frameworks, libraries, documentation, logs and other Apple-created materials. In consideration for your agreement to abide by the following terms, conditioned upon your compliance with these terms and subject to these terms, Apple grants you, for a period of ninety (90) days from the date you download the Apple Software, a limited, non-exclusive, non-sublicensable license under Apple’s copyrights in the Apple Software to download, install, compile and run the Apple Software internally within your organization only on a single Apple-branded computer you own or control, for the sole purpose of verifying the security and privacy characteristics of Apple Private Cloud Compute. This Agreement does not allow the Apple Software to exist on more than one Apple-branded computer at a time, and you may not distribute or make the Apple Software available over a network where it could be used by multiple devices at the same time. You may not, directly or indirectly, redistribute the Apple Software or any portions thereof. The Apple Software is only licensed and intended for use as expressly stated above and may not be used for other purposes or in other contexts without Apple's prior written permission. Except as expressly stated in this notice, no other rights or licenses, express or implied, are granted by Apple herein.
// 2. The Apple Software is provided by Apple on an "AS IS" basis. APPLE MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS, SYSTEMS, OR SERVICES. APPLE DOES NOT WARRANT THAT THE APPLE SOFTWARE WILL MEET YOUR REQUIREMENTS, THAT THE OPERATION OF THE APPLE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE, THAT DEFECTS IN THE APPLE SOFTWARE WILL BE CORRECTED, OR THAT THE APPLE SOFTWARE WILL BE COMPATIBLE WITH FUTURE APPLE PRODUCTS, SOFTWARE OR SERVICES. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY APPLE OR AN APPLE AUTHORIZED REPRESENTATIVE WILL CREATE A WARRANTY.
// 3. IN NO EVENT SHALL APPLE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, COMPILATION OR OPERATION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), STRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 4. This Agreement is effective until terminated. Your rights under this Agreement will terminate automatically without notice from Apple if you fail to comply with any term(s) of this Agreement. Upon termination, you agree to cease all use of the Apple Software and destroy all copies, full or partial, of the Apple Software. This Agreement constitutes the entire understanding of the parties with respect to the subject matter contained herein, and supersedes all prior negotiations, representations, or understandings, written or oral. This Agreement will be governed and construed in accordance with the laws of the State of California, without regard to its choice of law rules.
// You may report security issues about Apple products to product-security@apple.com, as described here: https://www.apple.com/support/security/. Non-security bugs and enhancement requests can be made via https://bugreport.apple.com as described here: https://developer.apple.com/bug-reporting/
// EA1937
// 10/02/2024

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: RopesRateLimit.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import InternalSwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: InternalSwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: InternalSwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

package enum Proto_Ropes_RateLimit_RequestType: InternalSwiftProtobuf.Enum, Swift.CaseIterable {
  package typealias RawValue = Int
  case invoke // = 0
  case prefetch // = 1
  case ratelimitConfig // = 2
  case UNRECOGNIZED(Int)

  package init() {
    self = .invoke
  }

  package init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invoke
    case 1: self = .prefetch
    case 2: self = .ratelimitConfig
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  package var rawValue: Int {
    switch self {
    case .invoke: return 0
    case .prefetch: return 1
    case .ratelimitConfig: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  package static let allCases: [Proto_Ropes_RateLimit_RequestType] = [
    .invoke,
    .prefetch,
    .ratelimitConfig,
  ]

}

package struct Proto_Ropes_RateLimit_Values: Sendable {
  // InternalSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var value: [String] = []

  package var unknownFields = InternalSwiftProtobuf.UnknownStorage()

  package init() {}
}

package struct Proto_Ropes_RateLimit_RateLimitConfigRequest: Sendable {
  // InternalSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If none of the above field is set
  /// server returns a full list of ratelimiting
  /// config including all known applications.
  package var bundleID: String {
    get {return _bundleID ?? String()}
    set {_bundleID = newValue}
  }
  /// Returns true if `bundleID` has been explicitly set.
  package var hasBundleID: Bool {return self._bundleID != nil}
  /// Clears the value of `bundleID`. Subsequent reads from it will return its default value.
  package mutating func clearBundleID() {self._bundleID = nil}

  package var featureID: String {
    get {return _featureID ?? String()}
    set {_featureID = newValue}
  }
  /// Returns true if `featureID` has been explicitly set.
  package var hasFeatureID: Bool {return self._featureID != nil}
  /// Clears the value of `featureID`. Subsequent reads from it will return its default value.
  package mutating func clearFeatureID() {self._featureID = nil}

  package var workloadType: String {
    get {return _workloadType ?? String()}
    set {_workloadType = newValue}
  }
  /// Returns true if `workloadType` has been explicitly set.
  package var hasWorkloadType: Bool {return self._workloadType != nil}
  /// Clears the value of `workloadType`. Subsequent reads from it will return its default value.
  package mutating func clearWorkloadType() {self._workloadType = nil}

  package var params: Dictionary<String,Proto_Ropes_RateLimit_Values> = [:]

  /// The default 0 is for INVOKE
  package var requestType: Proto_Ropes_RateLimit_RequestType = .invoke

  package var unknownFields = InternalSwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _bundleID: String? = nil
  fileprivate var _featureID: String? = nil
  fileprivate var _workloadType: String? = nil
}

package struct Proto_Ropes_RateLimit_RateLimitConfiguration: Sendable {
  // InternalSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// each new request will match this configuration
  /// if every value that is present here is also present
  /// on the request and they are all the same. In the case
  /// of tags, every tag is considered separately (that is,
  /// every present key/value must match, but the map
  /// as a whole need not match).
  package var bundleID: String = String()

  package var featureID: String = String()

  package var workloadType: String = String()

  package var params: Dictionary<String,Proto_Ropes_RateLimit_Values> = [:]

  package var requestType: Proto_Ropes_RateLimit_RequestType = .invoke

  package var rate: Proto_Ropes_RateLimit_RateLimitConfiguration.Rate {
    get {return _rate ?? Proto_Ropes_RateLimit_RateLimitConfiguration.Rate()}
    set {_rate = newValue}
  }
  /// Returns true if `rate` has been explicitly set.
  package var hasRate: Bool {return self._rate != nil}
  /// Clears the value of `rate`. Subsequent reads from it will return its default value.
  package mutating func clearRate() {self._rate = nil}

  package var ttl: InternalSwiftProtobuf.Google_Protobuf_Duration {
    get {return _ttl ?? InternalSwiftProtobuf.Google_Protobuf_Duration()}
    set {_ttl = newValue}
  }
  /// Returns true if `ttl` has been explicitly set.
  package var hasTtl: Bool {return self._ttl != nil}
  /// Clears the value of `ttl`. Subsequent reads from it will return its default value.
  package mutating func clearTtl() {self._ttl = nil}

  /// A value of 0 indicates that the client computes its own jitter
  package var jitter: Double = 0

  package var unknownFields = InternalSwiftProtobuf.UnknownStorage()

  package struct Rate: Sendable {
    // InternalSwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    package var count: UInt32 = 0

    package var duration: InternalSwiftProtobuf.Google_Protobuf_Duration {
      get {return _duration ?? InternalSwiftProtobuf.Google_Protobuf_Duration()}
      set {_duration = newValue}
    }
    /// Returns true if `duration` has been explicitly set.
    package var hasDuration: Bool {return self._duration != nil}
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
    package mutating func clearDuration() {self._duration = nil}

    package var unknownFields = InternalSwiftProtobuf.UnknownStorage()

    package init() {}

    fileprivate var _duration: InternalSwiftProtobuf.Google_Protobuf_Duration? = nil
  }

  package init() {}

  fileprivate var _rate: Proto_Ropes_RateLimit_RateLimitConfiguration.Rate? = nil
  fileprivate var _ttl: InternalSwiftProtobuf.Google_Protobuf_Duration? = nil
}

package struct Proto_Ropes_RateLimit_RateLimitConfigurationList: Sendable {
  // InternalSwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  package var rateLimitConfiguration: [Proto_Ropes_RateLimit_RateLimitConfiguration] = []

  package var unknownFields = InternalSwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.apple.ropes.ratelimit.v1"

extension Proto_Ropes_RateLimit_RequestType: InternalSwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap: InternalSwiftProtobuf._NameMap = [
    0: .same(proto: "INVOKE"),
    1: .same(proto: "PREFETCH"),
    2: .same(proto: "RATELIMIT_CONFIG"),
  ]
}

extension Proto_Ropes_RateLimit_Values: InternalSwiftProtobuf.Message, InternalSwiftProtobuf._MessageImplementationBase, InternalSwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".Values"
  package static let _protobuf_nameMap: InternalSwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  package mutating func decodeMessage<D: InternalSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.value) }()
      default: break
      }
    }
  }

  package func traverse<V: InternalSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitRepeatedStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Proto_Ropes_RateLimit_Values, rhs: Proto_Ropes_RateLimit_Values) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Ropes_RateLimit_RateLimitConfigRequest: InternalSwiftProtobuf.Message, InternalSwiftProtobuf._MessageImplementationBase, InternalSwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".RateLimitConfigRequest"
  package static let _protobuf_nameMap: InternalSwiftProtobuf._NameMap = [
    1: .standard(proto: "bundle_id"),
    2: .standard(proto: "feature_id"),
    3: .standard(proto: "workload_type"),
    4: .same(proto: "params"),
    5: .standard(proto: "request_type"),
  ]

  package mutating func decodeMessage<D: InternalSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._bundleID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._featureID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._workloadType) }()
      case 4: try { try decoder.decodeMapField(fieldType: InternalSwiftProtobuf._ProtobufMessageMap<InternalSwiftProtobuf.ProtobufString,Proto_Ropes_RateLimit_Values>.self, value: &self.params) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.requestType) }()
      default: break
      }
    }
  }

  package func traverse<V: InternalSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bundleID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._featureID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._workloadType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    if !self.params.isEmpty {
      try visitor.visitMapField(fieldType: InternalSwiftProtobuf._ProtobufMessageMap<InternalSwiftProtobuf.ProtobufString,Proto_Ropes_RateLimit_Values>.self, value: self.params, fieldNumber: 4)
    }
    if self.requestType != .invoke {
      try visitor.visitSingularEnumField(value: self.requestType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Proto_Ropes_RateLimit_RateLimitConfigRequest, rhs: Proto_Ropes_RateLimit_RateLimitConfigRequest) -> Bool {
    if lhs._bundleID != rhs._bundleID {return false}
    if lhs._featureID != rhs._featureID {return false}
    if lhs._workloadType != rhs._workloadType {return false}
    if lhs.params != rhs.params {return false}
    if lhs.requestType != rhs.requestType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Ropes_RateLimit_RateLimitConfiguration: InternalSwiftProtobuf.Message, InternalSwiftProtobuf._MessageImplementationBase, InternalSwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".RateLimitConfiguration"
  package static let _protobuf_nameMap: InternalSwiftProtobuf._NameMap = [
    1: .standard(proto: "bundle_id"),
    2: .standard(proto: "feature_id"),
    3: .standard(proto: "workload_type"),
    5: .same(proto: "params"),
    6: .standard(proto: "request_type"),
    10: .same(proto: "rate"),
    11: .same(proto: "ttl"),
    12: .same(proto: "jitter"),
  ]

  package mutating func decodeMessage<D: InternalSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bundleID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.featureID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.workloadType) }()
      case 5: try { try decoder.decodeMapField(fieldType: InternalSwiftProtobuf._ProtobufMessageMap<InternalSwiftProtobuf.ProtobufString,Proto_Ropes_RateLimit_Values>.self, value: &self.params) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.requestType) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._rate) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._ttl) }()
      case 12: try { try decoder.decodeSingularDoubleField(value: &self.jitter) }()
      default: break
      }
    }
  }

  package func traverse<V: InternalSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.bundleID.isEmpty {
      try visitor.visitSingularStringField(value: self.bundleID, fieldNumber: 1)
    }
    if !self.featureID.isEmpty {
      try visitor.visitSingularStringField(value: self.featureID, fieldNumber: 2)
    }
    if !self.workloadType.isEmpty {
      try visitor.visitSingularStringField(value: self.workloadType, fieldNumber: 3)
    }
    if !self.params.isEmpty {
      try visitor.visitMapField(fieldType: InternalSwiftProtobuf._ProtobufMessageMap<InternalSwiftProtobuf.ProtobufString,Proto_Ropes_RateLimit_Values>.self, value: self.params, fieldNumber: 5)
    }
    if self.requestType != .invoke {
      try visitor.visitSingularEnumField(value: self.requestType, fieldNumber: 6)
    }
    try { if let v = self._rate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._ttl {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    if self.jitter.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.jitter, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Proto_Ropes_RateLimit_RateLimitConfiguration, rhs: Proto_Ropes_RateLimit_RateLimitConfiguration) -> Bool {
    if lhs.bundleID != rhs.bundleID {return false}
    if lhs.featureID != rhs.featureID {return false}
    if lhs.workloadType != rhs.workloadType {return false}
    if lhs.params != rhs.params {return false}
    if lhs.requestType != rhs.requestType {return false}
    if lhs._rate != rhs._rate {return false}
    if lhs._ttl != rhs._ttl {return false}
    if lhs.jitter != rhs.jitter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Ropes_RateLimit_RateLimitConfiguration.Rate: InternalSwiftProtobuf.Message, InternalSwiftProtobuf._MessageImplementationBase, InternalSwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Proto_Ropes_RateLimit_RateLimitConfiguration.protoMessageName + ".Rate"
  package static let _protobuf_nameMap: InternalSwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    2: .same(proto: "duration"),
  ]

  package mutating func decodeMessage<D: InternalSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.count) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      default: break
      }
    }
  }

  package func traverse<V: InternalSwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 1)
    }
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Proto_Ropes_RateLimit_RateLimitConfiguration.Rate, rhs: Proto_Ropes_RateLimit_RateLimitConfiguration.Rate) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Ropes_RateLimit_RateLimitConfigurationList: InternalSwiftProtobuf.Message, InternalSwiftProtobuf._MessageImplementationBase, InternalSwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".RateLimitConfigurationList"
  package static let _protobuf_nameMap: InternalSwiftProtobuf._NameMap = [
    1: .standard(proto: "rate_limit_configuration"),
  ]

  package mutating func decodeMessage<D: InternalSwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rateLimitConfiguration) }()
      default: break
      }
    }
  }

  package func traverse<V: InternalSwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rateLimitConfiguration.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rateLimitConfiguration, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Proto_Ropes_RateLimit_RateLimitConfigurationList, rhs: Proto_Ropes_RateLimit_RateLimitConfigurationList) -> Bool {
    if lhs.rateLimitConfiguration != rhs.rateLimitConfiguration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
