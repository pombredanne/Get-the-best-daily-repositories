---
description: 
globs: 
---
# Cursor Development Rules and Guidelines

## Project Structure
- Keep components in `src/components` directory
- Place reusable hooks in `src/hooks`
- Store types and interfaces in `src/types`
- Maintain utilities in `src/lib`
- Keep page components in `src/app`

## Component Organization
1. Components should be organized in feature folders:
```
src/components/
  calendar/
    CalendarGrid.tsx
    TimeSlot.tsx
    WeekView.tsx
  tasks/
    TaskCard.tsx
    TaskList.tsx
  ui/
    Button.tsx
    Modal.tsx
```

## State Management
- Use Zustand for global state
- Keep state logic in `src/store` directory
- Follow atomic state pattern (small, focused stores)
- Use local state for component-specific data

## Styling Guidelines
- Use Tailwind CSS for styling
- Follow mobile-first approach
- Keep custom CSS in `globals.css` minimal
- Use CSS variables for theming
- Maintain consistent spacing and color schemes

## TypeScript Best Practices
- Always define proper interfaces and types
- Use strict type checking
- Avoid `any` type
- Keep types in separate files when reused
- Use generics when appropriate

## Code Organization (within files)
1. Imports order:
   - React and Next.js imports
   - Third-party libraries
   - Local components
   - Types and interfaces
   - Utilities and hooks

2. Component structure:
   ```typescript
   // Types/Interfaces
   interface Props {
     // ...
   }

   // Component
   export function ComponentName({ prop1, prop2 }: Props) {
     // Hooks
     // State
     // Effects
     // Helper functions
     // Render
   }
   ```

## Performance Considerations
- Use React.memo for expensive renders
- Implement proper loading states
- Optimize images and assets
- Use code splitting where appropriate

## Error Handling
- Implement proper error boundaries
- Use consistent error messages
- Log errors appropriately
- Provide user-friendly error states

## Environment Variables
- Never commit sensitive data
- Use `.env.example` for reference
- Document required variables
- Use proper naming convention


## Common Commands
```bash
# Development
npm run dev

# Type checking
npm run type-check

# Linting
npm run lint

# Testing
npm run test

# Building
npm run build
```

For `npm install` make sure to include the --legacy-peer-deps flag

## Database Strategy
- Use SQLite with Prisma for data persistence
- Keep database file in `/prisma` directory
- Follow schema-first development approach
- Use migrations for database changes

### Database Structure
```prisma
// Example schema structure
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}
```

### Database Guidelines
1. Schema Design
   - Use meaningful table names
   - Follow consistent naming conventions
   - Include timestamps (createdAt, updatedAt)
   - Use appropriate field types
   - Document relationships
   - Add proper indexes

2. Data Access
   - Use Prisma Client for all database operations
   - Implement repository pattern
   - Keep database logic in `/src/lib/db` directory
   - Use transactions where appropriate
   - Handle errors gracefully


### File Structure
```
/prisma
  schema.prisma        # Database schema
  migrations/          # Migration files
  seed.ts             # Seed data
  dev.db              # Development database (gitignored)
  
/src
  /lib
    /db
      client.ts       # Prisma client instance
      repositories/   # Database access logic
      migrations/     # Migration utilities
      backup/        # Backup utilities
```


## Calendar Integration

3. File Organization
   ```
   /src
     /lib
       /calendar
         sync.ts        # Feed synchronization
         events.ts      # Event management
         types.ts       # Type definitions
         cache.ts       # Local cache management
   ```

4. Features
   - Add/remove calendar feeds
   - Toggle feed visibility
   - Color coding per feed
   - Manual refresh
   - Error handling
   - Offline support

5. Best Practices
   - Cache feeds locally
   - Rate limit refreshes
   - Handle parsing errors
   - Validate feed URLs
   - Support private feeds
   - Handle network issues

6. User Experience
   - Show sync status
   - Loading indicators
   - Error messages
   - Feed management UI
   - Color customization

7. Performance
   - Efficient event storage
   - Optimize recurring events
   - Smart feed refresh
   - Batch updates
   - Memory management

8. Security
   - Validate URLs
   - Sanitize event data
   - Handle CORS
   - Private feed auth
   - Rate limiting

### Future Integration Path
1. Phase 1: ICS/iCal Support
   - Basic feed integration
   - Read-only support
   - Local caching
   - Manual refresh

2. Phase 2: Enhanced Features
   - Automatic sync
   - Multiple feeds
   - Feed groups
   - Advanced recurrence

3. Phase 3: Provider Integration
   - Google Calendar
   - Outlook Calendar
   - CalDAV support
   - Two-way sync

## Resources
- [Next.js Documentation](mdc:https:/nextjs.org/docs)
- [Tailwind CSS Documentation](mdc:https:/tailwindcss.com/docs)
- [TypeScript Documentation](mdc:https:/www.typescriptlang.org/docs)
- [React Documentation](mdc:https:/react.dev)
- [Zustand Documentation](mdc:https:/github.com/pmndrs/zustand)
- [Prisma Documentation](mdc:https:/www.prisma.io/docs)
- [SQLite Documentation](mdc:https:/www.sqlite.org/docs.html)
- [Prisma + Next.js Guide](mdc:https:/www.prisma.io/nextjs)
- [SQLite Best Practices](mdc:https:/www.sqlite.org/bestpractices.html)
- [iCal RFC 5545](mdc:https:/datatracker.ietf.org/doc/html/rfc5545)
- [ical.js Library](mdc:https:/github.com/kewisch/ical.js)
- @CalDAV RFC 4791 

