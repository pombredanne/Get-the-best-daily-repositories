set(ENGINE_CMAKE_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}")
get_filename_component(ENGINE_CODE_DIRECTORY "${ENGINE_CMAKE_DIRECTORY}/.." ABSOLUTE CACHE PATH "" FORCE)
set(ENGINE_CODE_DIRECTORY ${ENGINE_CODE_DIRECTORY} CACHE INTERNAL "")

if(NOT DEFINED BINARY_DIRECTORY)
	set(BINARY_DIRECTORY "${CMAKE_SOURCE_DIR}/bin")
endif()
if(NOT DEFINED LIBRARY_DIRECTORY)
	set(LIBRARY_DIRECTORY "${CMAKE_SOURCE_DIR}/lib")
endif()

get_filename_component(BINARY_OUTPUT_DIRECTORY "${BINARY_DIRECTORY}" ABSOLUTE CACHE PATH "" FORCE)
get_filename_component(LIBRARY_OUTPUT_DIRECTORY "${LIBRARY_DIRECTORY}" ABSOLUTE CACHE PATH "" FORCE)

message("Using binary directory ${BINARY_OUTPUT_DIRECTORY}")
message("Using library directory ${LIBRARY_OUTPUT_DIRECTORY}")

set(ENGINE_CMAKE_DIRECTORY "${ENGINE_CODE_DIRECTORY}/cmake")

set(HOST_X86 0 CACHE INTERNAL "")
set(HOST_ARM 0 CACHE INTERNAL "")

if(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "arm64")
	set(HOST_ARM 1 CACHE INTERNAL "")
elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "AMD64")
	set(HOST_X86 1 CACHE INTERNAL "")
elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "X86")
	set(HOST_X86 1 CACHE INTERNAL "")
elseif(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "x86_64")
	set(HOST_X86 1 CACHE INTERNAL "")
else()
	message(FATAL_ERROR "Failed to detect host architecture!")
endif()

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(HOST_64BIT 1 CACHE INTERNAL "")
    set(HOST_32BIT 0 CACHE INTERNAL "")
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(HOST_32BIT 1 CACHE INTERNAL "")
	set(HOST_64BIT 0 CACHE INTERNAL "")
endif()

if(HOST_X86)
	if(HOST_64BIT)
		set(HOST_ARCHITECTURE "x64" CACHE INTERNAL "")
	else()
		set(HOST_ARCHITECTURE "x86" CACHE INTERNAL "")
	endif()
elseif(HOST_ARM)
	if(HOST_64BIT)
		set(HOST_ARCHITECTURE "arm64" CACHE INTERNAL "")
	else()
		set(HOST_ARCHITECTURE "arm" CACHE INTERNAL "")
	endif()
endif()

set(HOST_PLATFORM_WINDOWS 0 CACHE INTERNAL "")
set(HOST_PLATFORM_APPLE_MACOS 0 CACHE INTERNAL "")
set(HOST_PLATFORM_LINUX 0 CACHE INTERNAL "")

if(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Windows")
	set(HOST_PLATFORM_NAME "Windows" CACHE INTERNAL "")
	set(HOST_PLATFORM_WINDOWS 1 CACHE INTERNAL "")
elseif(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Darwin")
	set(HOST_PLATFORM_NAME "MacOS" CACHE INTERNAL "")
	set(HOST_PLATFORM_APPLE_MACOS 1 CACHE INTERNAL "")
elseif(${CMAKE_HOST_SYSTEM_NAME} MATCHES "Linux")
	set(HOST_PLATFORM_NAME "Linux" CACHE INTERNAL "")
	set(HOST_PLATFORM_LINUX 1 CACHE INTERNAL "")
endif()

set(PLATFORM_WINDOWS 0 CACHE INTERNAL "")
set(PLATFORM_DESKTOP 0 CACHE INTERNAL "")
set(PLATFORM_MOBILE 0 CACHE INTERNAL "")
set(PLATFORM_CONSOLE 0 CACHE INTERNAL "")
set(PLATFORM_X86 0 CACHE INTERNAL "")
set(PLATFORM_APPLE 0 CACHE INTERNAL "")
set(PLATFORM_POSIX 0 CACHE INTERNAL "")
set(PLATFORM_APPLE_IOS 0 CACHE INTERNAL "")
set(PLATFORM_ARM 0 CACHE INTERNAL "")
set(PLATFORM_APPLE_MACOS 0 CACHE INTERNAL "")
set(PLATFORM_APPLE_MACCATALYST 0 CACHE INTERNAL "")
set(PLATFORM_APPLE_VISIONOS 0 CACHE INTERNAL "")
set(PLATFORM_ANDROID 0 CACHE INTERNAL "")
set(PLATFORM_LINUX 0 CACHE INTERNAL "")
set(PLATFORM_WEB 0 CACHE INTERNAL "")
set(PLATFORM_WEBASSEMBLY 0 CACHE INTERNAL "")
set(PLATFORM_EMSCRIPTEN 0 CACHE INTERNAL "")
set(PLATFORM_64BIT 0 CACHE INTERNAL "")
set(PLATFORM_32BIT 0 CACHE INTERNAL "")

set(GENERATOR_VISUAL_STUDIO 0 CACHE INTERNAL "")
set(GENERATOR_XCODE 0 CACHE INTERNAL "")
set(GENERATOR_NINJA 0 CACHE INTERNAL "")
set(GENERATOR_MAKEFILES 0 CACHE INTERNAL "")

if(${CMAKE_GENERATOR} MATCHES "Visual Studio")
	set(GENERATOR_VISUAL_STUDIO 1 CACHE INTERNAL "")
elseif(${CMAKE_GENERATOR} STREQUAL "Xcode")
		set(GENERATOR_XCODE 1 CACHE INTERNAL "")
elseif(${CMAKE_GENERATOR} MATCHES "Ninja")
	set(GENERATOR_NINJA 1 CACHE INTERNAL "")
elseif(${CMAKE_GENERATOR} MATCHES "Makefiles")
		set(GENERATOR_MAKEFILES 1 CACHE INTERNAL "")
endif()

option(OPTION_CONTINUOUS_INTEGRATION "Enable CI mode & checks" OFF)
if(OPTION_CONTINUOUS_INTEGRATION)
	set(CONTINUOUS_INTEGRATION 0 CACHE INTERNAL "")
else()
	set(CONTINUOUS_INTEGRATION 1 CACHE INTERNAL "")
endif()

if(WIN32 AND NOT EMSCRIPTEN)
	set(PLATFORM_WINDOWS 1 CACHE INTERNAL "")
	set(PLATFORM_NAME "Windows" CACHE INTERNAL "")
	set(PLATFORM_DESKTOP 1 CACHE INTERNAL "")
	set(PLATFORM_X86 ${HOST_X86} CACHE INTERNAL "")
	set(PLATFORM_ARM ${HOST_ARM} CACHE INTERNAL "")
	set(PLATFORM_64BIT ${HOST_64BIT} CACHE INTERNAL "")
	set(PLATFORM_ARCHITECTURE ${HOST_ARCHITECTURE} CACHE INTERNAL "")
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "iOS" OR ${CMAKE_SYSTEM_NAME} MATCHES "visionOS")
	set(PLATFORM_APPLE 1 CACHE INTERNAL "")
	set(PLATFORM_POSIX 1 CACHE INTERNAL "")

	if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
		set(PLATFORM_APPLE_MACOS 1 CACHE INTERNAL "")
		set(PLATFORM_NAME "MacOS" CACHE INTERNAL "")
		set(PLATFORM_TARGET_NAME "MacOS" CACHE INTERNAL "")
		set(PLATFORM_DESKTOP 1 CACHE INTERNAL "")
	elseif(${CMAKE_SYSTEM_NAME} MATCHES "visionOS")
		set(PLATFORM_APPLE_VISIONOS 1 CACHE INTERNAL "")
		set(PLATFORM_NAME "visionOS" CACHE INTERNAL "")
		set(PLATFORM_TARGET_NAME "visionOS" CACHE INTERNAL "")
		set(PLATFORM_MOBILE 1 CACHE INTERNAL "")
	elseif(${CMAKE_SYSTEM_NAME} MATCHES "macCatalyst")
		set(PLATFORM_APPLE_MACCATALYST 1 CACHE INTERNAL "")
		set(PLATFORM_NAME "macCatalyst" CACHE INTERNAL "")
		set(PLATFORM_TARGET_NAME "macCatalyst" CACHE INTERNAL "")
		set(PLATFORM_DESKTOP 1 CACHE INTERNAL "")
	else()
		set(PLATFORM_APPLE_IOS 1 CACHE INTERNAL "")
		set(PLATFORM_NAME "iOS" CACHE INTERNAL "")
		set(PLATFORM_TARGET_NAME "iOS" CACHE INTERNAL "")
		set(PLATFORM_MOBILE 1 CACHE INTERNAL "")
	endif()

	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_MACOS_ ${PLATFORM_APPLE_MACOS} CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_MACOS_iphoneos 0 CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_MACOS_macosx 1 CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_MACOS_xros 0 CACHE INTERNAL "")

	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_IOS_ ${PLATFORM_APPLE_IOS} CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_IOS_iphoneos 1 CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_IOS_macosx 0 CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_IOS_xros 0 CACHE INTERNAL "")

	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_VISIONOS_ ${PLATFORM_APPLE_IOS} CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_VISIONOS_iphoneos 0 CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_VISIONOS_macosx 0 CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_VISIONOS_xros 1 CACHE INTERNAL "")

	set(PLATFORM_ARCHITECTURE "$(CURRENT_ARCH)$(EFFECTIVE_PLATFORM_NAME)" CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=macosx*] "arm64 x86_64" CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=macosx*] "arm64 x86_64" CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=iphoneos*] "arm64")
	set(CMAKE_XCODE_ATTRIBUTE_ARCHS[sdk=iphonesimulator*] "arm64")
	set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=iphoneos*] "arm64")
	set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=iphonesimulator*] "arm64")
	set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=xros*] "arm64")
	set(CMAKE_XCODE_ATTRIBUTE_VALID_ARCHS[sdk=xros*] "arm64")
	set(CMAKE_OSX_ARCHITECTURES x86_64 arm64 CACHE INTERNAL "")

	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_ARM64_ ${HOST_ARM} CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_ARM64_arm64 1 CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_ARM64_x86_64 0 CACHE INTERNAL "")
	set(PLATFORM_ARM "$(NGINE_IS_ARM64_$(CURRENT_ARCH))" CACHE INTERNAL "")

	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_X86_ ${HOST_X86} CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_X86_arm64 0 CACHE INTERNAL "")
	set(CMAKE_XCODE_ATTRIBUTE_NGINE_IS_X86_x86_64 1 CACHE INTERNAL "")
	set(PLATFORM_X86 "$(NGINE_IS_X86_$(CURRENT_ARCH))" CACHE INTERNAL "")

	set(PLATFORM_64BIT ${HOST_64BIT} CACHE INTERNAL "")

	set(CMAKE_XCODE_ATTRIBUTE_SUPPORTED_PLATFORMS "iphoneos iphonesimulator macosx xros xrsimulator")
	set(CMAKE_XCODE_EFFECTIVE_PLATFORMS "-iphoneos -iphonesimulator -macosx -xros -xrsimulator")
	set(XCODE_EMIT_EFFECTIVE_PLATFORM_NAME ON CACHE INTERNAL "")

	set(CMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH "YES" CACHE INTERNAL "")

	set(CMAKE_FRAMEWORK_PATH
          	${CMAKE_DEVELOPER_ROOT}/Library/PrivateFrameworks
          	${CMAKE_OSX_SYSROOT_INT}/System/Library/Frameworks
          	${CMAKE_FRAMEWORK_PATH} CACHE INTERNAL ""
	)

	set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
	set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
	set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
	set (CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)

	set(CMAKE_INSTALL_PREFIX "`pwd`/_install")
	set(CMAKE_IOS_INSTALL_COMBINED YES)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Android")
	set(PLATFORM_ANDROID 1 CACHE INTERNAL "")
	set(PLATFORM_POSIX 1 CACHE INTERNAL "")
	set(PLATFORM_NAME "Android" CACHE INTERNAL "")
	set(PLATFORM_MOBILE 1 CACHE INTERNAL "")
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set(PLATFORM_LINUX 1 CACHE INTERNAL "")
	set(PLATFORM_POSIX 1 CACHE INTERNAL "")
	set(PLATFORM_NAME "Linux" CACHE INTERNAL "")
	set(PLATFORM_DESKTOP 1 CACHE INTERNAL "")
	set(PLATFORM_X86 ${HOST_X86} CACHE INTERNAL "")
	set(PLATFORM_ARM ${HOST_ARM} CACHE INTERNAL "")
	set(PLATFORM_64BIT ${HOST_64BIT} CACHE INTERNAL "")
	set(PLATFORM_ARCHITECTURE ${HOST_ARCHITECTURE} CACHE INTERNAL "")
elseif(EMSCRIPTEN)
	set(PLATFORM_WEB 1 CACHE INTERNAL "")
	set(PLATFORM_POSIX 1 CACHE INTERNAL "")
	set(PLATFORM_NAME "Web" CACHE INTERNAL "")
	set(PLATFORM_WEBASSEMBLY 1 CACHE INTERNAL "")
	set(PLATFORM_EMSCRIPTEN 1 CACHE INTERNAL "")
	set(PLATFORM_32BIT 1 CACHE INTERNAL "")
	set(PLATFORM_ARCHITECTURE "webassembly" CACHE INTERNAL "")

	set(CMAKE_EXECUTABLE_SUFFIX ".html")
else()
	message(FATAL_ERROR "Failed to detect target platform")
endif()

set(PLATFORM_TYPES PLATFORM_WINDOWS=${PLATFORM_WINDOWS} PLATFORM_DESKTOP=${PLATFORM_DESKTOP} PLATFORM_X86=${PLATFORM_X86} PLATFORM_APPLE=${PLATFORM_APPLE} PLATFORM_POSIX=${PLATFORM_POSIX} PLATFORM_APPLE_IOS=${PLATFORM_APPLE_IOS} PLATFORM_APPLE_MACCATALYST=${PLATFORM_APPLE_MACCATALYST} PLATFORM_APPLE_XROS=${PLATFORM_APPLE_XROS} PLATFORM_ARM=${PLATFORM_ARM} PLATFORM_APPLE_MACOS=${PLATFORM_APPLE_MACOS} PLATFORM_ANDROID=${PLATFORM_ANDROID} PLATFORM_LINUX=${PLATFORM_LINUX} PLATFORM_WEB=${PLATFORM_WEB} CACHE INTERNAL "")

option(OPTION_SANDBOX "Enable OS sandboxing if supported" OFF)
if (PLATFORM_APPLE_IOS OR PLATFORM_APPLE_MACCATALYST OR PLATFORM_APPLE_VISIONOS)
	set (OPTION_SANDBOX ON CACHE INTERNAL "")
endif()

option(OPTION_UNITY_BUILD "Enable Unity / Uber build" OFF)

option(OPTION_PRECOMPILED_HEADERS "Use precompiled headers" ON)
if(PLATFORM_APPLE OR (OPTION_UNITY_BUILD AND MSVC))
	# Precompiled headers aren't compatible with Unity build on MSVC
	set(OPTION_PRECOMPILED_HEADERS 0 CACHE INTERNAL "")
endif()

option(OPTION_ADDRESS_SANITIZER "Enable Address Sanitizer" OFF)

if(GENERATOR_VISUAL_STUDIO)
	# Visual Studio's file change detection is not compatible with CCache
	# Enabling it will break incremental builds and file change tracking, so we keep it off by default.
	option(OPTION_CCACHE "Enable CCache" OFF)
else()
	option(OPTION_CCACHE "Enable CCache" ON)
endif()
if(OPTION_CCACHE)
	set(CCACHE_PATHS "" CACHE INTERNAL "")
	if (PLATFORM_APPLE)
		set(CCACHE_PATHS "/opt/homebrew/bin" "/opt/homebrew/opt" CACHE INTERNAL "")
	endif()

	find_program(CCACHE_PROGRAM ccache HINTS ${CCACHE_PATHS} NO_CMAKE_FIND_ROOT_PATH)
	if(CCACHE_PROGRAM)
		set(USE_CCACHE 1 CACHE INTERNAL "")
		set(CCACHE_SLOPPINESS_ENV "CCACHE_CPP2=true CCACHE_SLOPPINESS=pch_defines,time_macros")
		set(ENV{CCACHE_SLOPPINESS} ${CCACHE_SLOPPINESS_ENV})

		if(PLATFORM_EMSCRIPTEN)
			set(ENV{_EMCC_CCACHE} 1)
			set(ENV{EM_COMPILER_WRAPPER} ccache)
		endif()

		if(HOST_PLATFORM_WINDOWS)
			# MSBuild / VS doesn't support compiler launchers
			# Note that the file has to be named cl.exe at the moment, or the build will fail.
			set(INTERMEDIATE_CCCACHE_EXECUTABLE_PATH "${CMAKE_CURRENT_BINARY_DIR}/cl.exe" CACHE INTERNAL "")
			file(COPY_FILE ${CCACHE_PROGRAM} "${INTERMEDIATE_CCCACHE_EXECUTABLE_PATH}" ONLY_IF_DIFFERENT)

			list(APPEND CMAKE_VS_GLOBALS CMAKE_VS_GLOBALS CLToolExe=cl.exe)
			list(APPEND CMAKE_VS_GLOBALS CMAKE_VS_GLOBALS CLToolPath=${CMAKE_CURRENT_BINARY_DIR})
			list(APPEND CMAKE_VS_GLOBALS CMAKE_VS_GLOBALS TrackFileAccess=False)
			list(APPEND CMAKE_VS_GLOBALS CMAKE_VS_GLOBALS DebugInformationFormat=OldStyle)
		else()
			# Note: the below is only supported for Ninja, Xcode and Makefiles.
		
			# Set up wrapper scripts
			set(C_LAUNCHER   "${CCACHE_PROGRAM}")
			set(CXX_LAUNCHER "${CCACHE_PROGRAM}")
			set(CCCACHE_EXPORTS "")

			foreach(option ${CCACHE_OPTIONS})
				set(CCCACHE_EXPORTS "${CCCACHE_EXPORTS}\nexport ${option}")
			endforeach()

			if(CMAKE_GENERATOR STREQUAL "Xcode")
				configure_file(${CMAKE_CURRENT_LIST_DIR}/launch-c-xcode.in   launch-c)
				configure_file(${CMAKE_CURRENT_LIST_DIR}/launch-cxx-xcode.in launch-cxx)

				file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/launch-c PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ)
				file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/launch-cxx PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ)
				
				# Set Xcode project attributes to route compilation and linking
				# through our scripts
				set(CMAKE_XCODE_ATTRIBUTE_CC         "${CMAKE_CURRENT_BINARY_DIR}/launch-c" CACHE INTERNAL "")
				set(CMAKE_XCODE_ATTRIBUTE_CXX        "${CMAKE_CURRENT_BINARY_DIR}/launch-cxx" CACHE INTERNAL "")
				set(CMAKE_XCODE_ATTRIBUTE_LD         "${CMAKE_CURRENT_BINARY_DIR}/launch-c" CACHE INTERNAL "")
				set(CMAKE_XCODE_ATTRIBUTE_LDPLUSPLUS "${CMAKE_CURRENT_BINARY_DIR}/launch-cxx" CACHE INTERNAL "")
			else()
				set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
				set(CMAKE_C_COMPILER_LAUNCHER "${CMAKE_COMMAND} -E env ${CCACHE_SLOPPINESS_ENV} ${CCACHE_PROGRAM}" CACHE INTERNAL "")
				set(CMAKE_CXX_COMPILER_LAUNCHER "${CMAKE_COMMAND} -E env ${CCACHE_SLOPPINESS_ENV} ${CCACHE_PROGRAM}" CACHE INTERNAL "")
			endif()
		endif()

		message(STATUS "Using ccache: ${CCACHE_PROGRAM}")
	else()
		set(USE_CCACHE 0 CACHE INTERNAL "")
		message(STATUS "Not using ccache.")

		if(HOST_PLATFORM_WINDOWS)
		else()
			if(CMAKE_GENERATOR STREQUAL "Xcode")
				unset(CMAKE_XCODE_ATTRIBUTE_CC CACHE)
				unset(CMAKE_XCODE_ATTRIBUTE_CXX CACHE)
				unset(CMAKE_XCODE_ATTRIBUTE_LD CACHE)
				unset(CMAKE_XCODE_ATTRIBUTE_LDPLUSPLUS CACHE)
			else()
				unset(CMAKE_C_COMPILER_LAUNCHER CACHE)
				unset(CMAKE_CXX_COMPILER_LAUNCHER CACHE)
			endif()
		endif()
	endif()
else()
	if(HOST_PLATFORM_WINDOWS)
	else()
		if(CMAKE_GENERATOR STREQUAL "Xcode")
			unset(CMAKE_XCODE_ATTRIBUTE_CC CACHE)
			unset(CMAKE_XCODE_ATTRIBUTE_CXX CACHE)
			unset(CMAKE_XCODE_ATTRIBUTE_LD CACHE)
			unset(CMAKE_XCODE_ATTRIBUTE_LDPLUSPLUS CACHE)
		else()
			unset(CMAKE_C_COMPILER_LAUNCHER CACHE)
			unset(CMAKE_CXX_COMPILER_LAUNCHER CACHE)
		endif()
	endif()
endif()

include("${ENGINE_CMAKE_DIRECTORY}/AddTargetOptions.cmake")
include("${ENGINE_CMAKE_DIRECTORY}/MakeInterfaceLibrary.cmake")
include("${ENGINE_CMAKE_DIRECTORY}/MakeStaticLibrary.cmake")
include("${ENGINE_CMAKE_DIRECTORY}/MakeObjectLibrary.cmake")
include("${ENGINE_CMAKE_DIRECTORY}/MakeStaticModule.cmake")
include("${ENGINE_CMAKE_DIRECTORY}/MakeDynamicLibrary.cmake")
include("${ENGINE_CMAKE_DIRECTORY}/MakeExecutable.cmake")
include("${ENGINE_CMAKE_DIRECTORY}/MakeTests.cmake")

set(CMAKE_CXX_STANDARD 17 CACHE INTERNAL "")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(COMPILER_CLANG 0 CACHE INTERNAL "")
set(COMPILER_GCC 0 CACHE INTERNAL "")
set(COMPILER_MSVC 0 CACHE INTERNAL "")
set(COMPILER_CLANG_WINDOWS 0 CACHE INTERNAL "")

if(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
	set(COMPILER_CLANG 1 CACHE INTERNAL "")
	if ("${CMAKE_CXX_SIMULATE_ID}" STREQUAL "MSVC" AND NOT PLATFORM_EMSCRIPTEN)
		set(COMPILER_CLANG_WINDOWS 1 CACHE INTERNAL "")
	endif()
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "AppleClang")
	set(COMPILER_CLANG 1 CACHE INTERNAL "")
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
	set(COMPILER_GCC 1 CACHE INTERNAL "")
elseif(MSVC)
	set(COMPILER_MSVC 1 CACHE INTERNAL "")
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${BINARY_OUTPUT_DIRECTORY}/${PLATFORM_NAME}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${LIBRARY_OUTPUT_DIRECTORY}/${PLATFORM_NAME}")
set(MACOSX_PACKAGE_LOCATION "${BINARY_OUTPUT_DIRECTORY}/${PLATFORM_NAME}" CACHE INTERNAL "")

set(BUILD_CONFIG_TYPES Debug Profile RelWithDebInfo CACHE INTERNAL "")

get_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(isMultiConfig)
	set(CMAKE_CONFIGURATION_TYPES  "${BUILD_CONFIG_TYPES}" CACHE STRING "" FORCE)
else()
	if(NOT CMAKE_BUILD_TYPE)
		set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING "" FORCE)
	endif()
	set_property(CACHE CMAKE_BUILD_TYPE PROPERTY HELPSTRING "Choose the type of build")
	# set the valid options for cmake-gui drop-down list
	set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "${BUILD_CONFIG_TYPES}")
	set(CMAKE_CONFIGURATION_TYPES  "${BUILD_CONFIG_TYPES}" CACHE STRING "" FORCE)
endif()

foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
	string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG_UPPER)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG_UPPER} "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${OUTPUTCONFIG}" CACHE PATH "" FORCE)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG_UPPER} "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/${OUTPUTCONFIG}" CACHE PATH "" FORCE)

	set(CMAKE_EXE_LINKER_FLAGS_${OUTPUTCONFIG_UPPER} "${CMAKE_EXE_LINKER_FLAGS}")
endforeach()

set(PLUGINS_IN_EXECUTABLE 1 CACHE INTERNAL "")

#if(PLUGINS_IN_EXECUTABLE)
#	if(COMPILER_CLANG)
#		add_compile_options($<$<CONFIG:Debug>:-fembed-bitcode-marker> $<$<CONFIG:Profile>:-fembed-bitcode> $<$<CONFIG:Release>:-fembed-bitcode>)
#	endif()
#else()
if(PLATFORM_APPLE)
	set(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE "NO")
endif()

option(OPTION_EXCEPTIONS "Enable exceptions" OFF)

cmake_host_system_information(RESULT SYSTEM_LOGICAL_CORE_COUNT QUERY NUMBER_OF_LOGICAL_CORES)

#	cmake_host_system_information(RESULT SYSTEM_TOTAL_MEMORY_MB QUERY TOTAL_PHYSICAL_MEMORY)
#	# Sets the amount of memory required per core in MB.
#	# We use this to tell MSBuild the maximum number of processes it can spawn.
#	set(REQUIRED_MEMORY_PER_LOGICAL_CORE_MB 2000)
#	#math(EXPR MAXIMUM_COMPILATION_PROCESS_COUNT "${SYSTEM_TOTAL_MEMORY_MB} / ${REQUIRED_MEMORY_PER_LOGICAL_CORE_MB}" OUTPUT_FORMAT DECIMAL)
#	if(${MAXIMUM_COMPILATION_PROCESS_COUNT} GREATER ${SYSTEM_LOGICAL_CORE_COUNT})
#		set(MAXIMUM_COMPILATION_PROCESS_COUNT ${SYSTEM_LOGICAL_CORE_COUNT} CACHE INTERNAL "")
#	else()
#		set(MAXIMUM_COMPILATION_PROCESS_COUNT ${MAXIMUM_COMPILATION_PROCESS_COUNT} CACHE INTERNAL "")
#	endif()
set(MAXIMUM_COMPILATION_PROCESS_COUNT ${SYSTEM_LOGICAL_CORE_COUNT})

set(CMAKE_BUILD_PARALLEL_LEVEL ${MAXIMUM_COMPILATION_PROCESS_COUNT} CACHE INTERNAL "")

if(COMPILER_CLANG)
	file(WRITE "${CMAKE_BINARY_DIR}/.lldbinit" CONTENTS "command script import ${ENGINE_CODE_DIRECTORY}/Common/Public/Common/CommonLLDBFormatters.py")
endif()

if(COMPILER_MSVC)
	if(NOT OPTION_EXCEPTIONS)
	  if(CMAKE_CXX_FLAGS MATCHES "/EHsc ")
	   string(REPLACE "/EHsc" "/EHs-c-" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	  endif()

	  if(CMAKE_CXX_FLAGS MATCHES "/EHsc$")
		string(REPLACE "/EHsc" "/EHs-c-" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	  endif()
	endif()

  if(CMAKE_CXX_FLAGS MATCHES "/GR ")
	string(REPLACE "/GR" "/GR-" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  endif()
  
	# Use Multi-ToolTask scheduler
    if(NOT CMAKE_VS_GLOBALS MATCHES "(^|;)UseMultiToolTask=")
        list(APPEND CMAKE_VS_GLOBALS UseMultiToolTask=true)
    endif()
    if(NOT CMAKE_VS_GLOBALS MATCHES "(^|;)EnforceProcessCountAcrossBuilds=")
        list(APPEND CMAKE_VS_GLOBALS EnforceProcessCountAcrossBuilds=true)
    endif()

    if(NOT CMAKE_VS_GLOBALS MATCHES "(^|;)MultiProcMaxCount=")
        list(APPEND CMAKE_VS_GLOBALS MultiProcMaxCount=${MAXIMUM_COMPILATION_PROCESS_COUNT})
    endif()

	list(APPEND CMAKE_VS_GLOBALS CL_MPCount=${MAXIMUM_COMPILATION_PROCESS_COUNT})

	if(OPTION_CCACHE)
		set(VS_BUILD_COMMAND_ARGUMENTS "${VS_BUILD_COMMAND_ARGUMENTS} /p:TrackFileAccess=false /m" CACHE INTERNAL "")
	else()
		set(VS_BUILD_COMMAND_ARGUMENTS "${VS_BUILD_COMMAND_ARGUMENTS} /m" CACHE INTERNAL "")
	endif()
	set(CMAKE_VS_MSBUILD_COMMAND "${CMAKE_VS_MSBUILD_COMMAND} ${VS_BUILD_COMMAND_ARGUMENTS}" CACHE INTERNAL "")
endif()

set(CMAKE_CXX_LINK_LIBRARY_USING_whole_archive_SUPPORTED TRUE CACHE INTERNAL "")
set(CMAKE_Swift_LINK_LIBRARY_USING_whole_archive_SUPPORTED TRUE CACHE INTERNAL "")
if(COMPILER_CLANG AND PLATFORM_APPLE)
	set(CMAKE_CXX_LINK_LIBRARY_USING_whole_archive "-force_load <LIB_ITEM>" CACHE INTERNAL "")
	set(CMAKE_Swift_LINK_LIBRARY_USING_whole_archive "-force_load <LIB_ITEM>" CACHE INTERNAL "")
elseif(COMPILER_CLANG OR COMPILER_GCC)
  set(CMAKE_CXX_LINK_LIBRARY_USING_whole_archive "--whole-archive <LINK_ITEM> --no-whole-archive" CACHE INTERNAL "")
elseif(COMPILER_MSVC)
  set(CMAKE_CXX_LINK_LIBRARY_USING_whole_archive "/WHOLEARCHIVE:<LIBRARY>" CACHE INTERNAL "")
else()
  # feature not yet supported for the other environments
  set(CMAKE_CXX_LINK_LIBRARY_USING_whole_archive_SUPPORTED FALSE CACHE INTERNAL "")
endif()

# TODO: Move these to configuration
if (PLATFORM_WEB)
	set(USE_SSE 1 CACHE INTERNAL "")
	set(USE_SSE2 1 CACHE INTERNAL "")
	set(USE_SSE3 1 CACHE INTERNAL "")
	set(USE_SSSE3 1 CACHE INTERNAL "")
else()
	set(USE_SSE ${PLATFORM_X86} CACHE INTERNAL "")
	set(USE_SSE2 ${PLATFORM_X86} CACHE INTERNAL "")
	set(USE_SSE3 ${PLATFORM_X86} CACHE INTERNAL "")
	set(USE_SSSE3 ${PLATFORM_X86} CACHE INTERNAL "")
endif()
set(USE_AVX ${PLATFORM_X86} CACHE INTERNAL "")
set(USE_SSE4_1 ${PLATFORM_X86} CACHE INTERNAL "")
set(USE_SSE4_2 ${PLATFORM_X86} CACHE INTERNAL "")

# The others aren't common enough yet to be default
set(USE_AVX2 0 CACHE INTERNAL "")
set(USE_AVX512 0 CACHE INTERNAL "")

if(${PLATFORM_WINDOWS} AND NOT ${COMPILER_CLANG_WINDOWS})
	set(USE_SVML 1 CACHE INTERNAL "")
else()
	set(USE_SVML 0 CACHE INTERNAL "")
endif()

set(USE_NEON ${PLATFORM_ARM} CACHE INTERNAL "")
set(USE_WASM_SIMD128 ${PLATFORM_EMSCRIPTEN} CACHE INTERNAL "")

if (PLATFORM_LINUX)
	set(USE_SDL 1 CACHE INTERNAL "")
else()
	set(USE_SDL 0 CACHE INTERNAL "")
endif()
