name: Build and Release

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build-linux:
    runs-on: "ubuntu-latest"
    container: "quay.io/pypa/manylinux_2_28_x86_64" # needed for old glibc support
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Build
        run: cargo prepare-release

      - name: Package Linux artifacts
        run: |
          mkdir -p artifacts/linux
          cp target/release/moonlight-stable artifacts/linux/
          cp target/release/moonlight-ptb artifacts/linux/
          cp target/release/moonlight-canary artifacts/linux/
          cp target/release/libmoonlight_launcher.so artifacts/linux/
          cp installers/linux-sh/install.sh artifacts/linux/
          mkdir -p artifacts/linux/icons
          cp installers/assets/icon-*.png artifacts/linux/icons/

      - name: Bundle Linux artifacts
        run: |
          cd artifacts/linux

          tar -czf moonlight-stable-${{ github.ref_name }}.tar.gz moonlight-stable libmoonlight_launcher.so icons
          tar -czf moonlight-ptb-${{ github.ref_name }}.tar.gz moonlight-ptb libmoonlight_launcher.so icons
          tar -czf moonlight-canary-${{ github.ref_name }}.tar.gz moonlight-canary libmoonlight_launcher.so icons

          rm -r moonlight-stable moonlight-ptb moonlight-canary libmoonlight_launcher.so icons

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: artifacts/

  build-windows:
    runs-on: "windows-latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Install NSIS
        run: choco install nsis --version 3.10 -y

      - name: Build
        run: cargo prepare-release

      - name: Package Windows artifacts
        run: |
          mkdir -p artifacts/windows
          cp "target/release/moonlight installer.exe" "artifacts/windows/moonlight-installer.exe"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: artifacts/

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debugging
        run: ls -R

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          preserve_order: true
          files: |
            artifacts/**/windows/*
            artifacts/**/linux/*
