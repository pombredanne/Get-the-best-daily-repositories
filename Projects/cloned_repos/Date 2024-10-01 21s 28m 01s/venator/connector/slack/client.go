package slack

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/nianticlabs/venator/internal/config"
)

type Client struct {
	WebhookURL string
}

func New(ctx context.Context, config Config) (*Client, error) {
	return &Client{
		WebhookURL: config.WebhookURL,
	}, nil
}

func (c *Client) Publish(ctx context.Context, results []map[string]string, cfg *config.RuleConfig) error {
	if len(results) == 0 {
		return nil
	}

	var attachments []map[string]interface{}

	for i, r := range results {
		var fields []map[string]interface{}

		for key, value := range r {
			fields = append(fields, map[string]interface{}{
				"title": key,
				"value": value,
				"short": true,
			})
		}

		attachment := map[string]interface{}{
			"fallback": fmt.Sprintf("Finding %d", i+1),
			"title":    fmt.Sprintf("Finding %d", i+1),
			"fields":   fields,
			"color":    "danger",
		}
		attachments = append(attachments, attachment)
	}

	payload := map[string]interface{}{
		"text":        fmt.Sprintf("%d finding(s) generated by `%s` rule.", len(results), cfg.Name),
		"attachments": attachments,
		"username":    "venator",
		"icon_emoji":  ":bow_and_arrow:",
	}

	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("failed to marshal payload: %w", err)
	}

	resp, err := http.Post(c.WebhookURL, "application/json", bytes.NewBuffer(payloadBytes))
	if err != nil {
		return fmt.Errorf("failed to send message to slack: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("unexpected status code: %v", resp.StatusCode)
	}

	return nil
}
