#include <fstream>

#include "cpu/Psx.h"

std::pair<unsigned char*, size_t> ReadFile(char* filename)
{
    std::ifstream file(filename, std::ios::binary | std::ios::ate);
    if (!file.is_open())
    {
        throw std::runtime_error("Unable to open file");
    }

    size_t fileSize = file.tellg();
    file.seekg(0, std::ios::beg);

    unsigned char* buffer = new unsigned char[fileSize];
    file.read(reinterpret_cast<char*>(buffer), fileSize);
    file.close();
    return std::make_pair(buffer, fileSize);
}

int main(int argc, char* argv[])
{
#ifdef TEST
    unsigned char payload_bin[] = {
        0xd0, 0xff, 0xbd, 0x27, 0x2c, 0x00, 0xbf, 0xaf, 0x28, 0x00, 0xbe, 0xaf, 0x24, 0x00, 0xb0, 0xaf, 0x25, 0xf0,
        0xa0, 0x03, 0x00, 0x40, 0x01, 0x3c, 0xd2, 0x00, 0x24, 0x24, 0x00, 0x40, 0x01, 0x3c, 0xdf, 0x00, 0x25, 0x24,
        0x2e, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x06, 0x24, 0x20, 0x00, 0xc2, 0xaf, 0x20, 0x00, 0xc7, 0x8f, 0x00, 0x01,
        0x10, 0x24, 0x14, 0x00, 0xb0, 0xaf, 0x10, 0x00, 0xa0, 0xaf, 0x00, 0x40, 0x01, 0x3c, 0xd2, 0x00, 0x24, 0x24,
        0x00, 0x40, 0x01, 0x3c, 0xee, 0x00, 0x25, 0x24, 0x2e, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x06, 0x24, 0x1c, 0x00,
        0xc2, 0xaf, 0x18, 0x00, 0xd0, 0xaf, 0x1c, 0x00, 0xc1, 0x8f, 0x18, 0x00, 0xc2, 0x27, 0x14, 0x00, 0xa2, 0xaf,
        0x10, 0x00, 0xa1, 0xaf, 0x00, 0x40, 0x01, 0x3c, 0xf8, 0x00, 0x24, 0x24, 0x00, 0x40, 0x01, 0x3c, 0x04, 0x01,
        0x25, 0x24, 0x03, 0x00, 0x06, 0x24, 0x2e, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x07, 0x24, 0x31, 0x00, 0x00, 0x0c,
        0x1c, 0x00, 0xc4, 0x8f, 0x00, 0x40, 0x01, 0x3c, 0x31, 0x00, 0x00, 0x0c, 0xd0, 0x00, 0x24, 0x24, 0x25, 0xe8,
        0xc0, 0x03, 0x24, 0x00, 0xb0, 0x8f, 0x28, 0x00, 0xbe, 0x8f, 0x2c, 0x00, 0xbf, 0x8f, 0x08, 0x00, 0xe0, 0x03,
        0x30, 0x00, 0xbd, 0x27, 0x2f, 0x00, 0x02, 0x34, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
        0x02, 0x34, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
        0x33, 0x32, 0x2e, 0x64, 0x6c, 0x6c, 0x00, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48,
        0x65, 0x61, 0x70, 0x00, 0x48, 0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x00, 0x73, 0x65, 0x63, 0x75,
        0x72, 0x33, 0x32, 0x2e, 0x64, 0x6c, 0x6c, 0x00, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
        0x65, 0x45, 0x78, 0x41, 0x00};
    unsigned int payload_bin_len = 275;

    PSX psx = PSX(payload_bin, payload_bin_len);

#else
    if (argc != 2)
        return printf("Usage: psxecute.exe .\\payload.bin");
    std::pair<unsigned char*, size_t> file = ReadFile(argv[1]);
    printf("[*] Payload loaded\n");
    PSX psx = PSX(file.first, file.second);

#endif

    if (!psx.isInitialized)
    {
        printf("[!] Failed to allocate memory at desired address");
        return 1;
    }
    printf("[*] PSX initialized\n");
    printf("----------------------------------\n");
    auto running = true;
    while (running) running = psx.RunNextInstruction();
    printf("----------------------------------\n");
    printf("[*] Payload returned\n");

    return 0;
}