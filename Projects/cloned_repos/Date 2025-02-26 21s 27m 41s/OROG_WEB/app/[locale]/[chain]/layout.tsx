// 导入全局样式文件
import '@/app/globals.css';
import '@ant-design/v5-patch-for-react-19';

import { use } from 'react';

// 导入 Metadata 类型，用于定义页面的元数据
import type { Metadata } from 'next';
// 导入 NextIntlClientProvider 组件，用于处理国际化
import { NextIntlClientProvider } from 'next-intl';
// 导入 getMessages 函数，用于获取国际化消息
import { getMessages } from 'next-intl/server';
// 导入 localFont 函数，用于加载本地字体
import localFont from 'next/font/local';
import { headers } from 'next/headers';
// 导入 notFound 函数，用于处理未找到的页面
import { notFound } from 'next/navigation';

import StyleProvider from '@/component/StyleProvider';
// 导入 routing 和 LocalesType 类型，用于处理路由和语言类型
import {
  ChainsType,
  LocalesType,
  routing,
} from '@/i18n/routing';
import { AntdRegistry } from '@ant-design/nextjs-registry';

import Foot from './Layout/foot';
import Header from './Layout/header';

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}


// 定义 Geist Mono 字体
const pingFang = localFont({
  src: "../../fonts/PingFangRegular.woff",
  variable: "--font-pingfang",
  weight: "100 900",
});
// 定义页面的元数据
export const metadata: Metadata = {
  title: "OROG",
  description: "Generated by create next app",
};
// 根布局组件，用于渲染页面的共同部分
export default function RootLayout({
  children,
  params
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: LocalesType, chain: ChainsType }>;
}>) {
  const { locale, chain } = use(params);
  // 如果当前语言不在支持的语言列表中，则返回 404 页面
  if (!routing.locales.includes(locale as LocalesType)) {
    notFound();
  }
  // 获取国际化消息
  const messages = use(getMessages());
  // 获取请求头
  const header = use(headers())
  // 从请求头获取主题
  const themeHeader = header.get("x-theme") || "dark";
  const theme = themeHeader === "dark" ? "dark" : "light";
  // 渲染页面布局
  return (
    <html lang={locale} className={`${theme} `} >
      <body className={`${pingFang.variable}  w-screen h-screen antialiased  select-none dark:bg-black bg-e6  `}>
        <NextIntlClientProvider messages={messages}>
          <AntdRegistry>
            <StyleProvider >
              <Header themeSer={theme} chain={chain as ChainsType} />
              {children}
              <Foot themeSer={theme} />
            </StyleProvider>
          </AntdRegistry>
        </NextIntlClientProvider>
      </body>
    </html >
  );
}