#!/bin/bash
#################################################################
#                                                               #
#  PVESecure - Proxmox VE Security and Maintenance Script       #
#                                                               #
#  - Performs system updates                                    #
#  - Checks container updates                                   #
#  - Security audits (ClamAV, Rootkit, NPM, Docker)             #
#  - Discord notifications                                      #
#                                                               #
#  Created by: ConnectedSecure                                  #
#  YouTube: https://www.youtube.com/@connectedsecure		    #
#  X/Twitter: @SecureCnnected                                   #
#                                                               #
#  Version: 2.1                                                 #
#                                                               #
#################################################################

# Colors for output formatting
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script version
SCRIPT_VERSION="2.1"

# Configuration file
CONFIG_FILE="/etc/pvesecure.conf"
LOG_DIR="/var/log/proxmox_maintenance"
CURRENT_DATE=$(date +%Y-%m-%d_%H-%M-%S)
DETAILED_LOG="${LOG_DIR}/maintenance_${CURRENT_DATE}_detailed.log"
SUMMARY_LOG="${LOG_DIR}/maintenance_${CURRENT_DATE}_summary.log"

# Default settings
DO_UPDATE=false
DO_SECURITY=false
DO_BACKUP=false
EMAIL_NOTIFY=false
DISCORD_NOTIFY=false
EMAIL=""
DISCORD_WEBHOOK=""

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}This script must be run as root${NC}" 
   exit 1
fi

# Create log directory if it doesn't exist
mkdir -p "$LOG_DIR"

# Start detailed logging
echo "=== Detailed Log - $(date) ===" > "$DETAILED_LOG"

# Function to check for script updates
check_for_updates() {
    log_and_echo "Checking for script updates..." "info"
    
    # First try to get latest version from GitHub
    local LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/lowrisk75/proxmox-maintenance-security/main/version.txt 2>/dev/null)
    
    # Check if we got a valid version number (should only contain digits and dots)
    if [[ ! "$LATEST_VERSION" =~ ^[0-9.]+$ ]]; then
        log_and_echo "Could not retrieve version information from GitHub" "warning"
        return
    fi
    
    if [[ "$LATEST_VERSION" != "$SCRIPT_VERSION" ]]; then
        log_and_echo "New version available: $LATEST_VERSION (Current: $SCRIPT_VERSION)" "warning"
        log_and_echo "Get the latest version at: https://github.com/lowrisk75/proxmox-maintenance-security" "info"
        echo ""
        echo -e "${YELLOW}=============================================================${NC}"
        echo -e "${YELLOW}  New version available: $LATEST_VERSION (Current: $SCRIPT_VERSION)${NC}"
        echo -e "${YELLOW}  Visit: https://github.com/lowrisk75/proxmox-maintenance-security${NC}"
        echo -e "${YELLOW}=============================================================${NC}"
        echo ""
    else
        log_and_echo "You are running the latest version: $SCRIPT_VERSION" "success"
    fi
}

# Function to print banner
print_banner() {
    echo -e "${BLUE}"
    echo "==============================================================="
    echo "  PVESecure - Proxmox VE Security and Maintenance Script v$SCRIPT_VERSION"
    echo "==============================================================="
    echo -e "${NC}"
    echo -e "${GREEN}  Created by: ConnectedSecure${NC}"
    echo -e "${GREEN}  YouTube: ${NC}https://www.youtube.com/channel/UCSNleiwJs4VC-VYuRJ0nnjg"
    echo -e "${GREEN}  X/Twitter: ${NC}@SecureCnnected"
    echo ""
}

# Function to load configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        echo "Configuration loaded from $CONFIG_FILE"
    else
        echo "No configuration file found, creating new configuration."
    fi
}

# Function to save configuration
save_config() {
    echo "# PVESecure Configuration File" > "$CONFIG_FILE"
    echo "# Created on $(date)" >> "$CONFIG_FILE"
    echo >> "$CONFIG_FILE"
    
    if [[ -n "$EMAIL" ]]; then
        echo "EMAIL=\"$EMAIL\"" >> "$CONFIG_FILE"
    fi
    
    if [[ -n "$DISCORD_WEBHOOK" ]]; then
        echo "DISCORD_WEBHOOK=\"$DISCORD_WEBHOOK\"" >> "$CONFIG_FILE"
    fi
    
    chmod 600 "$CONFIG_FILE"
    echo "Configuration saved to $CONFIG_FILE"
}

# Function to run commands on the PVE host and log output
pve_command() {
    local command="$1"
    local log_file="$2"
    
    # Run the command
    eval "$command" >> "$log_file" 2>&1
    local exit_code=$?
    
    # Return the exit code
    return $exit_code
}

# Function to log and echo output
log_and_echo() {
    local text="$1"
    local level="${2:-normal}"

    # Echo with appropriate color based on level
    case $level in
        success)
            echo -e "${GREEN}$text${NC}"
            ;;
        error)
            echo -e "${RED}$text${NC}"
            ;;
        warning)
            echo -e "${YELLOW}$text${NC}"
            ;;
        info)
            echo -e "${BLUE}$text${NC}"
            ;;
        *)
            echo "$text"
            ;;
    esac

    # Add to logs
    echo "$text" >> "$DETAILED_LOG"
    
    # Add to summary log with timestamp if error or warning
    if [[ "$level" == "error" || "$level" == "warning" ]]; then
        echo "$(date +%H:%M:%S) - $text" >> "$SUMMARY_LOG"
    fi
}

# Function to display interactive menu with timeout
display_interactive_menu() {
    echo -e "${YELLOW}Please select an operation:${NC}"
    echo "1) Full System Maintenance (Updates + Security)"
    echo "2) Security Checks Only"
    echo "3) System Updates Only"
    echo "4) Full System Maintenance with Backups"
    echo "5) Exit"
    echo
    echo -e "${YELLOW}Defaulting to Full System Maintenance in 10 seconds...${NC}"
    
    # Read user input with timeout
    read -t 10 -p "Enter your choice [1-5]: " choice
    
    # Default to option 1 if no input
    if [ -z "$choice" ]; then
        echo -e "\nTimeout reached. Proceeding with Full System Maintenance..."
        choice=1
    fi
    
    # Process user choice
    case $choice in
        1)
            DO_UPDATE=true
            DO_SECURITY=true
            DO_BACKUP=false
            echo "Selected: Full System Maintenance"
            ;;
        2)
            DO_UPDATE=false
            DO_SECURITY=true
            DO_BACKUP=false
            echo "Selected: Security Checks Only"
            ;;
        3)
            DO_UPDATE=true
            DO_SECURITY=false
            DO_BACKUP=false
            echo "Selected: System Updates Only"
            ;;
        4)
            DO_UPDATE=true
            DO_SECURITY=true
            DO_BACKUP=true
            echo "Selected: Full System Maintenance with Backups"
            ;;
        5)
            echo "Exiting..."
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid selection. Defaulting to Full System Maintenance.${NC}"
            DO_UPDATE=true
            DO_SECURITY=true
            DO_BACKUP=false
            ;;
    esac
    
    # Load notification settings from config
    if [[ -n "$DISCORD_WEBHOOK" ]]; then
        DISCORD_NOTIFY=true
    fi
    
    if [[ -n "$EMAIL" ]]; then
        EMAIL_NOTIFY=true
    fi
    
    # Only ask for Discord webhook if it's not already configured
    if [[ -z "$DISCORD_WEBHOOK" ]]; then
        echo
        read -p "Enable Discord notifications? (y/n) [n]: " discord_choice
        if [[ "$discord_choice" == "y" || "$discord_choice" == "Y" ]]; then
            DISCORD_NOTIFY=true
            read -p "Enter Discord webhook URL: " DISCORD_WEBHOOK
        fi
    else
        DISCORD_NOTIFY=true
    fi
    
    # Only ask for email if it's not already configured
    if [[ -z "$EMAIL" ]]; then
        echo
        read -p "Enable email notifications? (y/n) [n]: " email_choice
        if [[ "$email_choice" == "y" || "$email_choice" == "Y" ]]; then
            EMAIL_NOTIFY=true
            read -p "Enter email address for notifications: " EMAIL
        fi
    else
        EMAIL_NOTIFY=true
    fi
}

# Function to initialize the script
initialize() {
    print_banner
    log_and_echo "PVESecure Script Started - $(date)" "info"
    
    # Check for updates
    check_for_updates
    
    echo "=== Summary Log - $(date) ===" > "$SUMMARY_LOG"
    echo "Proxmox Maintenance and Security Script" >> "$SUMMARY_LOG"
    echo "=====================================" >> "$SUMMARY_LOG"
    
    # Save config
    save_config
    
    log_and_echo "Configuration initialized with the following options:" "info"
    [[ "$DO_UPDATE" == "true" ]] && log_and_echo " - System Updates: Enabled" "info"
    [[ "$DO_SECURITY" == "true" ]] && log_and_echo " - Security Checks: Enabled" "info"
    [[ "$DO_BACKUP" == "true" ]] && log_and_echo " - Backup Operations: Enabled" "info"
    [[ "$EMAIL_NOTIFY" == "true" ]] && log_and_echo " - Email Notifications: Enabled" "info"
    [[ "$DISCORD_NOTIFY" == "true" ]] && log_and_echo " - Discord Notifications: Enabled" "info"
}

#------------------------------
# SYSTEM UPDATE FUNCTIONS
#------------------------------

# Function to update the Proxmox host
update_host() {
    log_and_echo "Starting system upgrade: apt-get dist-upgrade" "info"
    
    # Redirect output to log file
    {
        apt-get update
        apt-get dist-upgrade -y
    } >> "$DETAILED_LOG" 2>&1
    
    if [[ $? -eq 0 ]]; then
        log_and_echo "System upgrade completed successfully" "success"
        
        # Check if reboot is needed
        if [[ -f /var/run/reboot-required ]]; then
            log_and_echo "System requires a reboot after updates" "warning"
        fi
    else
        log_and_echo "Error during system upgrade" "error"
    fi
}

# Function to update containers
update_containers() {
    log_and_echo "Starting container updates..." "info"
    
    # Get all running containers
    CONTAINERS=$(pct list | grep running | awk '{print $1}')
    
    for CTID in $CONTAINERS; do
        CONTAINER_NAME=$(pct config "$CTID" | grep -oP 'name: \K.*' || echo "Container $CTID")
        
        # Better IP detection - get only non-loopback addresses
        CONTAINER_IP=$(pct exec "$CTID" -- bash -c "ip -4 addr show | grep -v '127.0.0.1' | grep inet | head -1 | awk '{print \$2}' | cut -d/ -f1")
        if [[ -z "$CONTAINER_IP" ]]; then
            CONTAINER_IP="Unknown IP"
        fi
        
        log_and_echo "Container $CTID ($CONTAINER_NAME) is up with IP: $CONTAINER_IP" "info"
        
        # Check if container is responsive
        if ! pct exec "$CTID" -- bash -c "echo 'Container access test'" > /dev/null 2>&1; then
            log_and_echo "ERROR: Cannot access container $CTID - skipping updates" "error"
            continue
        fi
        
        # Check network connectivity with more reliable method
        PING_STATUS=$(pct exec "$CTID" -- bash -c "ping -c 1 8.8.8.8 > /dev/null 2>&1 && echo 'success' || echo 'fail'")
        
        if [[ "$PING_STATUS" == "success" ]]; then
            log_and_echo "Container $CTID has network connectivity" "success"
            
            # Check DNS resolution
            DNS_STATUS=$(pct exec "$CTID" -- bash -c "ping -c 1 google.com > /dev/null 2>&1 && echo 'success' || echo 'fail'")
            
            if [[ "$DNS_STATUS" == "success" ]]; then
                log_and_echo "Container $CTID has working DNS resolution" "success"
                
                # Update container packages
                log_and_echo "Updating packages in container $CTID ($CONTAINER_NAME)..." "info"
                
                # Test if apt works in container
                if pct exec "$CTID" -- bash -c "apt-get update" >> "$DETAILED_LOG" 2>&1; then
                    log_and_echo "Container $CTID has working package management" "success"
                    
                    # Do upgrade
                    pct exec "$CTID" -- bash -c "apt-get update && apt-get upgrade -y" >> "$DETAILED_LOG" 2>&1
                else
                    log_and_echo "WARNING: Failed to update package lists for container $CTID" "warning"
                fi
            else
                log_and_echo "Container $CTID has no working DNS resolution - skipping updates" "warning"
            fi
        else
            log_and_echo "Container $CTID has no network connectivity - skipping updates" "warning"
        fi
        
        # Check for auth.log and secure files (might need sudo) - always try even without network
        if pct exec "$CTID" -- bash -c "[ -f /var/log/auth.log ]" > /dev/null 2>&1; then
            log_and_echo "Checking auth.log for container $CTID" "info"
            pct exec "$CTID" -- bash -c "grep -i 'Failed password' /var/log/auth.log | tail -5" >> "$DETAILED_LOG" 2>&1
        else
            log_and_echo "No auth.log found in container $CTID" "warning"
        fi
        
        # Network and service scanning - always try even without network
        log_and_echo "Scanning network services in container $CTID" "info"
        pct exec "$CTID" -- bash -c "ss -tulpn" >> "$DETAILED_LOG" 2>&1
    done
}

#------------------------------
# SECURITY CHECK FUNCTIONS
#------------------------------

# Function to execute ClamAV scan on host
run_clamav_on_host() {
    log_and_echo "Verifying ClamAV on host..." "info"
    
    # Install ClamAV if not present
    if ! command -v clamscan >/dev/null 2>&1; then
        log_and_echo "Installing ClamAV on host..." "info"
        apt-get update && apt-get install -y clamav clamav-daemon >> "$DETAILED_LOG" 2>&1
        
        # Update virus definitions
        log_and_echo "Updating ClamAV virus definitions..." "info"
        systemctl stop clamav-freshclam 2>/dev/null
        freshclam >> "$DETAILED_LOG" 2>&1 || log_and_echo "Warning: Could not update virus definitions" "warning"
        systemctl start clamav-freshclam 2>/dev/null
    fi
    
    # Run scan on important directories
    log_and_echo "Starting ClamAV scan on host..." "info"
    CLAM_LOG="${LOG_DIR}/clamscan_host_${CURRENT_DATE}.log"
    
    # FIXED: Added resource limits to prevent the clamscan from being killed
    clamscan --max-filesize=100M --max-scansize=400M --recursive --infected /home /etc /var /root > "$CLAM_LOG" 2>&1
    
    # Parse results for reporting
    INFECTED=$(grep "Infected files" "$CLAM_LOG" 2>/dev/null | awk '{print $3}')
    SCANNED=$(grep "Scanned files" "$CLAM_LOG" 2>/dev/null | awk '{print $3}')
    
    # FIXED: Changed the if statement syntax
    if [ -n "$INFECTED" ] && [ "$INFECTED" -gt 0 ]; then
        log_and_echo "⚠️ ALERT: Found $INFECTED infected files out of $SCANNED scanned files on host!" "error"
        grep -A2 FOUND "$CLAM_LOG" >> "$SUMMARY_LOG" 2>/dev/null
    else
        log_and_echo "ClamAV scan completed - No infections found in $SCANNED files" "success"
    fi
    
    log_and_echo "Full scan log available at: $CLAM_LOG" "info"
}

# Function to run ClamAV scan in a container
run_clamav_in_container() {
    local CTID="$1"
    local CONTAINER_NAME="$2"
    
    log_and_echo "Preparing ClamAV scan for container $CTID ($CONTAINER_NAME)..." "info"
    
    # Create a virus scan details section in the log
    echo "================================================================" >> "$DETAILED_LOG"
    echo "=== Container $CTID ($CONTAINER_NAME) Virus Scan Details ===" >> "$DETAILED_LOG"
    echo "================================================================" >> "$DETAILED_LOG"
    echo "Timestamp: $(date)" >> "$DETAILED_LOG"
    
    # Check if we can execute commands in container
    if ! pct exec "$CTID" -- bash -c "echo 'Container access test'" > /dev/null 2>&1; then
        log_and_echo "ERROR: Cannot access container $CTID - skipping security scan" "error"
        return
    fi
    
    # Create ClamAV scan log file
    CLAM_LOG="${LOG_DIR}/clamscan_${CTID}_${CURRENT_DATE}.log"
    
    # Check if ClamAV is installed and install if not
    if ! pct exec "$CTID" -- bash -c 'command -v clamscan >/dev/null 2>&1'; then
        log_and_echo "ClamAV not found in container $CTID, attempting to install..." "info"
        
        # Check if we have network connectivity in container
        if ! pct exec "$CTID" -- bash -c "ping -c 1 8.8.8.8" > /dev/null 2>&1; then
            log_and_echo "Container $CTID has no network connectivity - skipping ClamAV installation and scan" "warning"
            return
        fi
        
        # Try to install ClamAV
        if ! pct exec "$CTID" -- bash -c 'apt-get update && apt-get install -y clamav' >> "$DETAILED_LOG" 2>&1; then
            log_and_echo "Failed to install ClamAV in container $CTID - skipping scan" "error"
            return
        fi
        
        # Try to update virus definitions
        pct exec "$CTID" -- bash -c 'freshclam' >> "$DETAILED_LOG" 2>&1 || log_and_echo "Warning: Could not update virus definitions in container $CTID" "warning"
    fi
    
    # Run scan on important directories in container with resource limits
    log_and_echo "Starting ClamAV scan in container $CTID..." "info"
    
    # Added resource limits to prevent the clamscan from being killed
    pct exec "$CTID" -- bash -c "clamscan --max-filesize=50M --max-scansize=100M --recursive --infected /home /etc /var/www 2>&1" > "$CLAM_LOG"
    
    # Parse results
    INFECTED=$(grep -a "Infected files" "$CLAM_LOG" 2>/dev/null | awk '{print $3}' | tr -d ':')
    SCANNED=$(grep -a "Scanned files" "$CLAM_LOG" 2>/dev/null | awk '{print $3}' | tr -d ':')
    
    # Output scan details to the logs
    echo "Files scanned: ${SCANNED:-Unknown}" >> "$DETAILED_LOG"
    echo "Infected files: ${INFECTED:-Unknown}" >> "$DETAILED_LOG"
    
    if [ -n "$INFECTED" ] && [ "$INFECTED" -gt 0 ]; then
        log_and_echo "⚠️ ALERT: Found $INFECTED infected files in container $CTID ($CONTAINER_NAME)!" "error"
        grep -A2 FOUND "$CLAM_LOG" >> "$SUMMARY_LOG" 2>/dev/null
    else
        log_and_echo "Container $CTID ($CONTAINER_NAME) scan completed - No infections found" "success"
    fi
}
# Function to check for rootkits on host
run_rootkit_check_on_host() {
    local ROOT_SCAN_LOG="$LOG_DIR/rkhunter_${DATE_TIME}.log"
    
    log_and_echo "Checking for rootkits on host..." "info"
    
    # Update rkhunter database first
    log_and_echo "Updating rkhunter database..." "info"
    pve_command "rkhunter --update" "$ROOT_SCAN_LOG"
    
    # Run rootkit scan
    log_and_echo "Running rootkit scan on host..." "info"
    pve_command "rkhunter --check --sk | tee -a $ROOT_SCAN_LOG" "$ROOT_SCAN_LOG"
    
    # Process the output to count warnings
    WARNINGS_FOUND=$(grep -c "Warning:" "$ROOT_SCAN_LOG" 2>/dev/null || echo "0")
    # Clean up the variable to ensure it's just a number
    WARNINGS_FOUND=$(echo "$WARNINGS_FOUND" | tr -d '\n\r' | grep -o '[0-9]*' || echo "0")
    
    # Default to 0 if we couldn't parse the result
    if [[ ! "$WARNINGS_FOUND" =~ ^[0-9]+$ ]]; then
        WARNINGS_FOUND=0
    fi
    
    # Check if any warnings were found
    if [ $WARNINGS_FOUND -gt 0 ]; then
        log_and_echo "WARNING: $WARNINGS_FOUND potential rootkit warnings found!" "warning"
        log_and_echo "Check $ROOT_SCAN_LOG for details" "info"
        if [ "$SEND_EMAIL" = true ]; then
            echo "Rootkit scan found $WARNINGS_FOUND warnings. Check $ROOT_SCAN_LOG for details." >> "$EMAIL_CONTENT"
        fi
    else
        log_and_echo "No rootkits found on host" "success"
        if [ "$SEND_EMAIL" = true ]; then
            echo "Rootkit scan completed - No issues found." >> "$EMAIL_CONTENT"
        fi
    fi
}




# Function to check for rootkits in a container
run_rootkit_check_in_container() {
    local CTID="$1"
    local CT_NAME="$2"
    local RK_SCAN_LOG="$LOG_DIR/rkhunter_${CTID}_${DATE_TIME}.log"
    
    log_and_echo "Checking for rootkits in container $CTID ($CT_NAME)..." "info"
    
    # Run rkhunter in the container
    log_and_echo "Running rkhunter scan in container $CTID..." "info"
    pct exec "$CTID" -- bash -c "if command -v rkhunter >/dev/null 2>&1; then rkhunter --check --sk; else echo 'rkhunter not installed'; fi" > "$RK_SCAN_LOG" 2>&1
    
    # Process the output to count warnings
    WARNINGS_FOUND=$(grep -c "Warning:" "$RK_SCAN_LOG" 2>/dev/null || echo "0")
    # Clean up the variable to ensure it's just a number
    WARNINGS_FOUND=$(echo "$WARNINGS_FOUND" | tr -d '\n\r' | grep -o '[0-9]*' || echo "0")
    
    # Default to 0 if we couldn't parse the result
    if [[ ! "$WARNINGS_FOUND" =~ ^[0-9]+$ ]]; then
        WARNINGS_FOUND=0
    fi
    
    # Check if any warnings were found
    if [ $WARNINGS_FOUND -gt 0 ]; then
        log_and_echo "WARNING: $WARNINGS_FOUND potential rootkit warnings found in container $CTID!" "warning"
        log_and_echo "Check $RK_SCAN_LOG for details" "info"
        if [ "$SEND_EMAIL" = true ]; then
            echo "Rootkit scan found $WARNINGS_FOUND warnings in container $CTID ($CT_NAME). Check $RK_SCAN_LOG for details." >> "$EMAIL_CONTENT"
        fi
    else
        log_and_echo "Container $CTID rootkit scan completed - No warnings found" "success"
        if [ "$SEND_EMAIL" = true ]; then
            echo "Rootkit scan in container $CTID ($CT_NAME) completed - No issues found." >> "$EMAIL_CONTENT"
        fi
    fi
}

# Function to check for NPM vulnerabilities in a container
check_npm_vulnerabilities() {
    local CTID="$1"
    local CONTAINER_NAME="$2"
    
    log_and_echo "Checking NPM packages in container $CTID ($CONTAINER_NAME)..." "info"
    
    # Check if we can execute commands in container
    if ! pct exec "$CTID" -- bash -c "echo 'Container access test'" > /dev/null 2>&1; then
        log_and_echo "ERROR: Cannot access container $CTID - skipping NPM vulnerability check" "error"
        return
    fi
    
    # Create NPM audit log file
    NPM_LOG="${LOG_DIR}/npm_audit_${CTID}_${CURRENT_DATE}.log"
    
    # Check if npm is available and run audit if possible
    if ! pct exec "$CTID" -- bash -c 'command -v npm >/dev/null 2>&1'; then
        log_and_echo "NPM not installed in container $CTID - skipping vulnerability check" "info"
        return
    fi
    
    # Check if we have network connectivity in container
    if ! pct exec "$CTID" -- bash -c "ping -c 1 8.8.8.8" > /dev/null 2>&1; then
        log_and_echo "Container $CTID has no network connectivity - skipping NPM vulnerability check" "warning"
        return
    fi
    
    # Run NPM audit
    log_and_echo "Running NPM audit in container $CTID..." "info"
    
    pct exec "$CTID" -- bash -c 'if npm help audit >/dev/null 2>&1; then
        npm audit
    else
        echo "NPM audit not available. Consider upgrading NPM."
    fi' > "$NPM_LOG" 2>&1
    
    # Check if vulnerabilities were found
    if grep -q "vulnerabilities" "$NPM_LOG" 2>/dev/null; then
        log_and_echo "⚠️ NPM vulnerabilities found in container $CTID ($CONTAINER_NAME)!" "warning"
        grep "vulnerabilities" "$NPM_LOG" 2>/dev/null | head -1 >> "$SUMMARY_LOG"
    else
        log_and_echo "No NPM vulnerabilities found in container $CTID" "success"
    fi
}
# Function to check Docker containers in a container
check_docker_security() {
    local CTID="$1"
    local CONTAINER_NAME="$2"
    
    log_and_echo "Checking Docker in container $CTID ($CONTAINER_NAME)..." "info"
    
    # Check if we can execute commands in container
    if ! pct exec "$CTID" -- bash -c "echo 'Container access test'" > /dev/null 2>&1; then
        log_and_echo "ERROR: Cannot access container $CTID - skipping Docker security check" "error"
        return
    fi
    
    # Create Docker security log file
    DOCKER_LOG="${LOG_DIR}/docker_security_${CTID}_${CURRENT_DATE}.log"
    
    # Check if Docker is installed
    if ! pct exec "$CTID" -- bash -c 'command -v docker >/dev/null 2>&1'; then
        log_and_echo "Docker not installed in container $CTID - skipping Docker security check" "info"
        return
    fi
    
    # Check if we have network connectivity in container
    if ! pct exec "$CTID" -- bash -c "ping -c 1 8.8.8.8" > /dev/null 2>&1; then
        log_and_echo "Container $CTID has no network connectivity - skipping Docker image updates" "warning"
        
        # Still check running containers even without network
        pct exec "$CTID" -- bash -c 'docker ps --format "{{.Names}} [{{.Image}}] - Running for {{.RunningFor}}"' > "$DOCKER_LOG" 2>&1
        
        # Log Docker container details
        log_and_echo "Docker containers in $CTID:" "info"
        cat "$DOCKER_LOG"
        return
    fi
    
    # Run Docker security checks
    log_and_echo "Running Docker security checks in container $CTID..." "info"
    
    pct exec "$CTID" -- bash -c 'echo "Docker Version: $(docker version --format "{{.Server.Version}}")"
        
        # List running containers
        echo "Running Containers:"
        docker ps --format "{{.Names}} [{{.Image}}] - Running for {{.RunningFor}}"
        
        # Check for outdated images
        echo "Checking for outdated images..."
        for container in $(docker ps --format "{{.Names}}"); do
            image=$(docker inspect --format="{{.Config.Image}}" $container)
            echo "Checking for updates to $container using image $image"
            if docker pull $image 2>/dev/null; then
                container_id=$(docker inspect --format="{{.Id}}" $container)
                image_id=$(docker inspect --format="{{.Id}}" $image)
                
                if [ "$container_id" != "$image_id" ]; then
                    echo "⚠️ Container $container is outdated and needs to be recreated with the new image"
                fi
            else
                echo "⚠️ Failed to check for updates to $image"
            fi
        done
    ' > "$DOCKER_LOG" 2>&1
    
    # Try installing and running Trivy if we can
    pct exec "$CTID" -- bash -c 'if ! command -v trivy >/dev/null 2>&1; then
        echo "Trivy not installed. Attempting basic image checks only."
    
        # Check Docker image security best practices
        for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>"); do
            echo "Image: $image"
            docker inspect $image | grep -E "Labels|Env|Cmd|Entrypoint" | grep -v "Labels\":{}"
        done
    fi' >> "$DOCKER_LOG" 2>&1
    
    # Check for vulnerabilities
    if grep -q "⚠️" "$DOCKER_LOG" 2>/dev/null; then
        log_and_echo "⚠️ Docker security issues found in container $CTID ($CONTAINER_NAME)!" "warning"
        grep -A1 "⚠️" "$DOCKER_LOG" 2>/dev/null | head -10 >> "$SUMMARY_LOG"
    else
        log_and_echo "No significant Docker issues found in container $CTID" "success"
    fi
}

# Function to run all security checks
run_security_checks() {
    log_and_echo "Starting security checks..." "info"
    
    # Run Host Security Checks
    run_clamav_on_host
    run_rootkit_check_on_host
    
    # Get all running containers
    CONTAINERS=$(pct list | grep running | awk '{print $1}')
    
    # Run Container Security Checks
    for CTID in $CONTAINERS; do
        CONTAINER_NAME=$(pct config "$CTID" | grep -oP 'name: \K.*' || echo "Container $CTID")
        log_and_echo "Running security checks on container $CTID ($CONTAINER_NAME)..." "info"
        
        # Run security scans
        run_clamav_in_container "$CTID" "$CONTAINER_NAME"
        run_rootkit_check_in_container "$CTID" "$CONTAINER_NAME"
        check_npm_vulnerabilities "$CTID" "$CONTAINER_NAME"
        check_docker_security "$CTID" "$CONTAINER_NAME"
    done
}

#------------------------------
# BACKUP FUNCTIONS
#------------------------------

# Function to backup containers
backup_containers() {
    log_and_echo "Starting container backups..." "info"
    
    # Get all running containers
    CONTAINERS=$(pct list | grep running | awk '{print $1}')
    
    BACKUP_ROOT="/mnt/backups/containers"
    mkdir -p "$BACKUP_ROOT"
    
    for CTID in $CONTAINERS; do
        CONTAINER_NAME=$(pct config "$CTID" | grep -oP 'name: \K.*' || echo "Container $CTID")
        
        log_and_echo "Backing up container $CTID ($CONTAINER_NAME)..." "info"
        
        # Create a backup of the container
        BACKUP_FILE="${BACKUP_ROOT}/vzdump-lxc-${CTID}-${CURRENT_DATE}.tar.gz"
        
        if vzdump "$CTID" --compress lzo --dumpdir "$BACKUP_ROOT" --mode stop >> "$DETAILED_LOG" 2>&1; then
            log_and_echo "Container $CTID backup completed successfully" "success"
        else
            log_and_echo "Container $CTID backup failed" "error"
        fi
    done
}

#------------------------------
# NOTIFICATION FUNCTIONS
#------------------------------

# Function to send email notification
send_email_notification() {
    if [[ "$EMAIL_NOTIFY" == "true" && -n "$EMAIL" ]]; then
        log_and_echo "Sending email notification to $EMAIL..." "info"
        
        # Prepare email content
        HOSTNAME=$(hostname)
        SUBJECT="Proxmox Maintenance Report - $HOSTNAME - $(date '+%Y-%m-%d')"
        
        # Email body
        if [[ -f "$SUMMARY_LOG" ]]; then
            cat "$SUMMARY_LOG" > /tmp/email_body.txt
            
            # Add a note if warnings were found
            if grep -q "warning\|error" "$SUMMARY_LOG"; then
                echo -e "\n⚠️ ATTENTION: Warnings or errors were detected during the maintenance run.\nPlease review the full logs at $LOG_DIR for details." >> /tmp/email_body.txt
            else
                echo -e "\nNo critical issues were detected during the maintenance run." >> /tmp/email_body.txt
            fi
            
            # Add link to logs
            echo -e "\nFull logs are available at: $LOG_DIR" >> /tmp/email_body.txt
            
            # Send the email
            if command -v mail >/dev/null 2>&1; then
                mail -s "$SUBJECT" "$EMAIL" < /tmp/email_body.txt >> "$DETAILED_LOG" 2>&1
                
                if [[ $? -eq 0 ]]; then
                    log_and_echo "Email notification sent successfully to $EMAIL" "success"
                else
                    log_and_echo "Failed to send email notification" "error"
                fi
            else
                log_and_echo "Mail command not found. Installing mailutils..." "info"
                apt-get update && apt-get install -y mailutils >> "$DETAILED_LOG" 2>&1
                
                # Try to send again
                mail -s "$SUBJECT" "$EMAIL" < /tmp/email_body.txt >> "$DETAILED_LOG" 2>&1
                
                if [[ $? -eq 0 ]]; then
                    log_and_echo "Email notification sent successfully to $EMAIL" "success"
                else
                    log_and_echo "Failed to send email notification even after installing mailutils" "error"
                fi
            fi
            
            # Clean up
            rm -f /tmp/email_body.txt
        else
            log_and_echo "Cannot find summary log file for email notification" "error"
        fi
    fi
}

# Function to send Discord notification
send_discord_notification() {
    if [[ "$DISCORD_NOTIFY" == "true" && -n "$DISCORD_WEBHOOK" ]]; then
        log_and_echo "Sending Discord notification..." "info"
        
        # Prepare Discord message
        HOSTNAME=$(hostname)
        MESSAGE="**Proxmox Maintenance Report - $HOSTNAME - $(date '+%Y-%m-%d')**\n\n"
        
        # Create a summary of all security checks
        MESSAGE+="**==== Security Scan Summary ====**\n"
        
        # Extract virus scan results
        INFECTED_COUNT=0
        CLAM_LOGS=$(ls -1 "${LOG_DIR}/clamscan_*_${CURRENT_DATE}.log" 2>/dev/null)
        if [[ -n "$CLAM_LOGS" ]]; then
            for CLAM_LOG in $CLAM_LOGS; do
                INFECTED=$(grep -a "Infected files" "$CLAM_LOG" 2>/dev/null | awk '{print $3}' | tr -d ':')
                if [[ -n "$INFECTED" && "$INFECTED" -gt 0 ]]; then
                    INFECTED_COUNT=$((INFECTED_COUNT + INFECTED))
                    SCAN_TYPE=$(basename "$CLAM_LOG" | cut -d'_' -f2)
                    MESSAGE+=":biohazard: Found $INFECTED infected files in $SCAN_TYPE\n"
                fi
            done
        fi
        
        if [[ "$INFECTED_COUNT" -eq 0 ]]; then
            MESSAGE+=":white_check_mark: No virus infections detected\n"
        fi
        
        # Extract rootkit scan results
        RKH_WARNING_COUNT=0
        RKH_LOGS=$(ls -1 "${LOG_DIR}/rkhunter_*_${CURRENT_DATE}.log" 2>/dev/null)
        if [[ -n "$RKH_LOGS" ]]; then
            for RKH_LOG in $RKH_LOGS; do
                WARNINGS=$(grep -c "Warning:" "$RKH_LOG" 2>/dev/null || echo "0")
                if [[ "$WARNINGS" -gt 0 ]]; then
                    RKH_WARNING_COUNT=$((RKH_WARNING_COUNT + WARNINGS))
                    SCAN_TYPE=$(basename "$RKH_LOG" | cut -d'_' -f2)
                    MESSAGE+=":warning: Found $WARNINGS rootkit warnings in $SCAN_TYPE\n"
                fi
            done
        fi
        
        if [[ "$RKH_WARNING_COUNT" -eq 0 ]]; then
            MESSAGE+=":white_check_mark: No rootkit warnings detected\n"
        fi
        
        # Extract NPM audit results
        NPM_VULN_COUNT=0
        NPM_LOGS=$(ls -1 "${LOG_DIR}/npm_audit_*_${CURRENT_DATE}.log" 2>/dev/null)
        if [[ -n "$NPM_LOGS" ]]; then
            for NPM_LOG in $NPM_LOGS; do
                if grep -q "vulnerabilities" "$NPM_LOG" 2>/dev/null; then
                    SCAN_TYPE=$(basename "$NPM_LOG" | cut -d'_' -f3)
                    VULN_LINE=$(grep "vulnerabilities" "$NPM_LOG" 2>/dev/null | head -1)
                    MESSAGE+=":warning: NPM issues in $SCAN_TYPE: $VULN_LINE\n"
                    NPM_VULN_COUNT=$((NPM_VULN_COUNT + 1))
                fi
            done
        fi
        
        if [[ "$NPM_VULN_COUNT" -eq 0 && -n "$NPM_LOGS" ]]; then
            MESSAGE+=":white_check_mark: No NPM vulnerabilities detected\n"
        fi
        
        # Extract Docker security results
        DOCKER_WARN_COUNT=0
        DOCKER_LOGS=$(ls -1 "${LOG_DIR}/docker_security_*_${CURRENT_DATE}.log" 2>/dev/null)
        if [[ -n "$DOCKER_LOGS" ]]; then
            for DOCKER_LOG in $DOCKER_LOGS; do
                if grep -q "⚠️" "$DOCKER_LOG" 2>/dev/null; then
                    SCAN_TYPE=$(basename "$DOCKER_LOG" | cut -d'_' -f3)
                    WARNINGS=$(grep -c "⚠️" "$DOCKER_LOG" 2>/dev/null || echo "0")
                    MESSAGE+=":warning: Docker issues in $SCAN_TYPE: $WARNINGS container/image problems\n"
                    DOCKER_WARN_COUNT=$((DOCKER_WARN_COUNT + WARNINGS))
                fi
            done
        fi
        
        if [[ "$DOCKER_WARN_COUNT" -eq 0 && -n "$DOCKER_LOGS" ]]; then
            MESSAGE+=":white_check_mark: No Docker security issues detected\n"
        fi
        
        # System update summary
        MESSAGE+="\n**==== System Update Summary ====**\n"
        if grep -q "System upgrade completed successfully" "$DETAILED_LOG"; then
            MESSAGE+=":white_check_mark: Host system updated successfully\n"
            
            # Check if reboot is needed
            if grep -q "System requires a reboot" "$DETAILED_LOG"; then
                MESSAGE+=":warning: **System requires a reboot after updates**\n"
            fi
        elif grep -q "Error during system upgrade" "$DETAILED_LOG"; then
            MESSAGE+=":x: Host system update failed\n"
        elif ! grep -q "Starting system upgrade" "$DETAILED_LOG"; then
            MESSAGE+=":information_source: System updates were not performed in this run\n"
        fi
        
        # Overall status indication
        MESSAGE+="\n**==== Overall Status ====**\n"
        if grep -q "error\|warning\|⚠️" "$SUMMARY_LOG"; then
            MESSAGE+=":warning: **Warnings or errors were detected**\n"
            MESSAGE+="Please check the full logs at $LOG_DIR for details\n"
            
            # Discord message part 2 (limited by character count)
            MESSAGE2="**Issues Found:**\n"
            grep -i "error\|warning\|⚠️" "$SUMMARY_LOG" | head -10 | while read -r line; do
                MESSAGE2+="- $line\n"
            done
            
            # Prepare JSON payload for part 1
            local JSON_DATA="{
                \"content\": \"$MESSAGE\"
            }"
            
            # Send first part
            curl -s -H "Content-Type: application/json" -d "$JSON_DATA" "$DISCORD_WEBHOOK" > /dev/null
            
            # Prepare JSON payload for part 2
            local JSON_DATA2="{
                \"content\": \"$MESSAGE2\"
            }"
            
            # Send second part
            curl -s -H "Content-Type: application/json" -d "$JSON_DATA2" "$DISCORD_WEBHOOK" > /dev/null
        else
            MESSAGE+=":white_check_mark: **No critical issues detected**\n"
            
            # Prepare JSON payload
            local JSON_DATA="{
                \"content\": \"$MESSAGE\"
            }"
            
            # Send webhook
            curl -s -H "Content-Type: application/json" -d "$JSON_DATA" "$DISCORD_WEBHOOK" > /dev/null
        fi
        
        log_and_echo "Discord notification sent successfully" "success"
    fi
}

# Function to display final summary
display_summary() {
    echo -e "${BLUE}"
    echo "==============================================================="
    echo "  PVESecure Maintenance Report Summary"
    echo "==============================================================="
    echo -e "${NC}"
    
    # Count warnings and errors
    WARNING_COUNT=$(grep -c "warning\|⚠️" "$SUMMARY_LOG" 2>/dev/null || echo "0")
    ERROR_COUNT=$(grep -c "error\|❌" "$SUMMARY_LOG" 2>/dev/null || echo "0")
    
    echo -e "${BLUE}Status Summary:${NC}"
    echo -e "  ${YELLOW}Warnings: $WARNING_COUNT${NC}"
    echo -e "  ${RED}Errors: $ERROR_COUNT${NC}"
    echo
    
    # FIXED: Changed the if statement syntax
    if [ "$WARNING_COUNT" -gt 0 ] || [ "$ERROR_COUNT" -gt 0 ]; then
        echo -e "${YELLOW}Top issues found:${NC}"
        grep -i "warning\|error\|⚠️\|❌" "$SUMMARY_LOG" 2>/dev/null | head -5 | while read -r line; do
            echo -e "  - $line"
        done
        echo
        echo -e "${YELLOW}Please check the detailed logs at $LOG_DIR for more information.${NC}"
    else
        echo -e "${GREEN}No critical issues detected in this maintenance run.${NC}"
    fi
    
    echo
    echo -e "${GREEN}Maintenance complete! Full logs saved to $LOG_DIR${NC}"
    echo -e "${BLUE}===============================================================${NC}"
    echo -e "${GREEN}Thank you for using PVESecure!${NC}"
    echo -e "${GREEN}Please consider subscribing to ConnectedSecure on YouTube${NC}"
    echo -e "${GREEN}YouTube: ${NC}www.youtube.com/@connectedsecure"
    echo -e "${GREEN}X/Twitter: ${NC}@SecureConnected"
    echo -e "${BLUE}===============================================================${NC}"
}

# Main function
main() {
    # Load existing config if available
    load_config
    
    # Display interactive menu
    display_interactive_menu
    
    # Initialize the script
    initialize
    
    # Run chosen operations
    if [[ "$DO_UPDATE" == "true" ]]; then
        update_host
        update_containers
    fi
    
    if [[ "$DO_SECURITY" == "true" ]]; then
        run_security_checks
    fi
    
    if [[ "$DO_BACKUP" == "true" ]]; then
        backup_containers
    fi
    
    # Send notifications
    if [[ "$EMAIL_NOTIFY" == "true" ]]; then
        send_email_notification
    fi
    
    if [[ "$DISCORD_NOTIFY" == "true" ]]; then
        send_discord_notification
    fi
    
    # Display final summary
    display_summary
}

# Run main function
main
