#Requires -Modules PSWriteHTML

function Convert-CADirectoryToSingleJson {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)]
        [string]$DirectoryPath,
        
        [Parameter()]
        [string]$OutputPath = "conversion_results.html"
    )

    if (-not (Test-Path -Path $DirectoryPath)) {
        Write-Error "Directory not found: $DirectoryPath"
        return
    }

    $allPolicies = [System.Collections.ArrayList]::new()
    $results = [System.Collections.ArrayList]::new()
    
    $getChildParams = @{
        Path   = $DirectoryPath
        Filter = "*.json"
    }
    $jsonFiles = @(Get-ChildItem @getChildParams)

    foreach ($file in $jsonFiles) {
        try {
            $getContentParams = @{
                Path = $file.FullName
                Raw  = $true
            }
            $policy = Get-Content @getContentParams | ConvertFrom-Json
            $null = $allPolicies.Add($policy)
            
            $successResult = [PSCustomObject]@{
                FileName   = $file.Name
                Status     = "Success"
                Error      = ""
                PolicyName = $policy.displayName
            }
            $null = $results.Add($successResult)
        }
        catch {
            $failureResult = [PSCustomObject]@{
                FileName   = $file.Name
                Status     = "Failed"
                Error      = $_.Exception.Message
                PolicyName = ""
            }
            $null = $results.Add($failureResult)
        }
    }

    $combinedJson = @{
        '@odata.context' = 'https://graph.microsoft.com/beta/$metadata#policies/conditionalAccessPolicies'
        'value'          = $allPolicies.ToArray()
    }

    $convertToJsonParams = @{
        Depth = 20
    }
    $combinedJson | ConvertTo-Json @convertToJsonParams | Set-Clipboard

    $successCount = ($results | Where-Object Status -eq "Success").Count
    $failureCount = ($results | Where-Object Status -eq "Failed").Count

    $metadata = @{
        GeneratedBy   = $env:USERNAME
        GeneratedOn   = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        TotalPolicies = $results.Count
        SuccessCount  = $successCount
        FailureCount  = $failureCount
    }

    $htmlParams = @{
        Title    = "Conditional Access Policy Conversion Report"
        FilePath = $OutputPath
        ShowHTML = $true
    }

    New-HTML @htmlParams {
        $sectionParams = @{
            HeaderText = "Conversion Summary"
        }
        New-HTMLSection @sectionParams {
            New-HTMLPanel {
                $textParams = @{
                    Text = @"
<h3>Report Details</h3>
<ul>
    <li>Generated By: $($metadata.GeneratedBy)</li>
    <li>Generated On: $($metadata.GeneratedOn)</li>
    <li>Total Policies Processed: $($metadata.TotalPolicies)</li>
    <li>Successful Conversions: $($metadata.SuccessCount)</li>
    <li>Failed Conversions: $($metadata.FailureCount)</li>
</ul>
"@
                }
                New-HTMLText @textParams
            }
        }
        
        $resultsSectionParams = @{
            HeaderText = "Policy Conversion Results"
        }
        New-HTMLSection @resultsSectionParams {
            $tableParams = @{
                DataTable     = $results
                ScrollX       = $true
                Buttons       = @('copyHtml5', 'excelHtml5', 'csvHtml5')
                SearchBuilder = $true
            }
            New-HTMLTable @tableParams {
                $failedConditionParams = @{
                    Name            = 'Status'
                    ComparisonType  = 'string'
                    Operator        = 'eq'
                    Value           = 'Failed'
                    BackgroundColor = 'Salmon'
                    Color           = 'Black'
                }
                New-TableCondition @failedConditionParams

                $successConditionParams = @{
                    Name            = 'Status'
                    ComparisonType  = 'string'
                    Operator        = 'eq'
                    Value           = 'Success'
                    BackgroundColor = 'LightGreen'
                    Color           = 'Black'
                }
                New-TableCondition @successConditionParams
            }
        }
    }

    $summaryParams = @{
        Object          = "`nConversion Summary:"
        ForegroundColor = "Cyan"
    }
    Write-Host @summaryParams

    Write-Host "----------------"

    $successParams = @{
        Object          = "Successful conversions: $successCount"
        ForegroundColor = "Green"
    }
    Write-Host @successParams

    $failureColor = if ($failureCount -gt 0) { "Red" } else { "Green" }
    $failureParams = @{
        Object          = "Failed conversions: $failureCount"
        ForegroundColor = $failureColor
    }
    Write-Host @failureParams

    $clipboardParams = @{
        Object          = "`nCombined JSON has been copied to clipboard"
        ForegroundColor = "Green"
    }
    Write-Host @clipboardParams

    $reportParams = @{
        Object          = "Report saved to: $OutputPath"
        ForegroundColor = "Green"
    }
    Write-Host @reportParams
}



# Example usage:
# Convert-CADirectoryToSingleJson -DirectoryPath "C:\code\CA\KVS\cabaseline202409\ConditionalAccess"
# Convert-CADirectoryToSingleJson -DirectoryPath "C:\CaaC\SandBox\Dec102024-v2\AO\ConditionalAccess"
Convert-CADirectoryToSingleJson -DirectoryPath "C:\CaaC\SandBox\Dec162024-v3\DC_KVS_Combined\MSFT\ADMINS"