#Requires -Modules Microsoft.Graph.Identity.SignIns, PSWriteHTML

function New-ExportPath {
    param (
        [string]$BasePath = "C:\Code\CB\Entra\Sandbox\Graph\export",
        [string]$FilePrefix = "ConditionalAccessPolicies"
    )
    
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $exportPaths = @{
        Directory = $BasePath
        Csv = Join-Path -Path $BasePath -ChildPath "$FilePrefix`_$timestamp.csv"
        Html = Join-Path -Path $BasePath -ChildPath "$FilePrefix`_$timestamp.html"
    }
    
    if (-not (Test-Path -Path $exportPaths.Directory)) {
        New-Item -Path $exportPaths.Directory -ItemType Directory -Force | Out-Null
    }
    
    return $exportPaths
}

function Export-PolicyData {
    param (
        [Parameter(Mandatory)]
        [object[]]$Policies,
        [Parameter(Mandatory)]
        [string]$CsvPath,
        [Parameter(Mandatory)]
        [string]$HtmlPath,
        [Parameter()]
        [hashtable]$Metadata
    )
    
    # Export to CSV
    $Policies | Export-Csv -Path $CsvPath -NoTypeInformation
    
    New-HTML -Title "Conditional Access Policies Report" -FilePath $HtmlPath -ShowHTML {
        New-HTMLSection -HeaderText "Deletion Summary" {
            New-HTMLPanel {
                New-HTMLText -Text @"
                <h3>Report Details</h3>
                <ul>
                    <li>Generated By: $($env:USERNAME)</li>
                    <li>Generated On: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</li>
                    <li>Tenant Name: $($Metadata.TenantName)</li>
                    <li>Tenant ID: $($Metadata.TenantId)</li>
                    <li>Total Policies: $($Metadata.TotalPolicies)</li>
                    <li>Successful Deletions: $($Metadata.SuccessCount)</li>
                    <li>Failed Deletions: $($Metadata.FailureCount)</li>
                </ul>
"@
            }
        }
        
        New-HTMLSection -HeaderText "Policy Deletion Results" {
            New-HTMLTable -DataTable $Policies -ScrollX -Buttons @('copyHtml5', 'excelHtml5', 'csvHtml5') -SearchBuilder {
                New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Failed' -BackgroundColor Salmon -Color Black
                New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Success' -BackgroundColor LightGreen -Color Black
                New-TableCondition -Name 'DisplayName' -ComparisonType string -Operator contains -Value '' -BackgroundColor White -Color Black
            }
        }
    }
}

function Remove-ConditionalAccessPolicies {
    [CmdletBinding(SupportsShouldProcess)]
    param()
    
    try {
        # Get current tenant details
        $tenantInfo = Get-MgOrganization
        $tenantName = $tenantInfo.DisplayName
        $tenantId = $tenantInfo.Id
        
        Write-Host "Connected to tenant: $tenantName (ID: $tenantId)" -ForegroundColor Yellow
        
        # Get export paths
        $exportPaths = New-ExportPath
        
        # Retrieve all Conditional Access policies
        $policies = Get-MgIdentityConditionalAccessPolicy
        $initialPolicyCount = $policies.Count
        
        if ($initialPolicyCount -eq 0) {
            Write-Warning "No Conditional Access policies found in the tenant."
            return
        }
        
        # Initialize results tracking
        $results = [System.Collections.ArrayList]::new()
        
        # Create initial backup with all policies
        $policies | ForEach-Object {
            $null = $results.Add([PSCustomObject]@{
                DisplayName = $_.DisplayName
                Id = $_.Id
                State = $_.State
                Status = "Pending"
                ErrorMessage = ""
            })
        }
        
        # Display summary
        Write-Host "`nSummary:" -ForegroundColor Cyan
        Write-Host "- Tenant: $tenantName" -ForegroundColor Cyan
        Write-Host "- Total policies to be deleted: $initialPolicyCount" -ForegroundColor Cyan
        Write-Host "- Backup will be saved to: $($exportPaths.Csv)" -ForegroundColor Cyan
        Write-Host "- HTML report: $($exportPaths.Html)" -ForegroundColor Cyan
        
        # Confirm deletion
        $confirmMessage = "Are you sure you want to delete all $initialPolicyCount Conditional Access policies from tenant '$tenantName'? (yes/no)"
        $confirmation = Read-Host -Prompt $confirmMessage
        
        if ($confirmation -ne 'yes') {
            Write-Warning "Operation aborted by user"
            return
        }
        
        # Delete policies and update results
        foreach ($policy in $policies) {
            if ($PSCmdlet.ShouldProcess($policy.DisplayName, "Delete Conditional Access Policy")) {
                try {
                    Remove-MgIdentityConditionalAccessPolicy -ConditionalAccessPolicyId $policy.Id
                    $result = $results | Where-Object Id -eq $policy.Id
                    $result.Status = "Success"
                    Write-Host "Deleted policy: $($policy.DisplayName)" -ForegroundColor Green
                }
                catch {
                    $result = $results | Where-Object Id -eq $policy.Id
                    $result.Status = "Failed"
                    $result.ErrorMessage = $_.Exception.Message
                    Write-Error "Failed to delete policy '$($policy.DisplayName)': $_"
                }
            }
        }
        
        # Final verification
        Start-Sleep -Seconds 5  # Allow time for deletions to process
        $remainingPolicies = Get-MgIdentityConditionalAccessPolicy
        
        # Prepare metadata for report
        $metadata = @{
            TenantName = $tenantName
            TenantId = $tenantId
            TotalPolicies = $initialPolicyCount
            SuccessCount = ($results | Where-Object Status -eq "Success").Count
            FailureCount = ($results | Where-Object Status -eq "Failed").Count
            RemainingPolicies = $remainingPolicies.Count
        }
        
        # Generate reports
        Export-PolicyData -Policies $results -CsvPath $exportPaths.Csv -HtmlPath $exportPaths.Html -Metadata $metadata
        
        # Display final results
        Write-Host "`nOperation Complete:" -ForegroundColor Cyan
        Write-Host "- Successfully deleted: $($metadata.SuccessCount) policies" -ForegroundColor Green
        Write-Host "- Failed to delete: $($metadata.FailureCount) policies" -ForegroundColor $(if ($metadata.FailureCount -gt 0) { 'Red' } else { 'Green' })
        Write-Host "- Remaining policies: $($metadata.RemainingPolicies)" -ForegroundColor Cyan
        Write-Host "`nReports generated:" -ForegroundColor Green
        Write-Host "CSV Report: $($exportPaths.Csv)" -ForegroundColor Green
        Write-Host "HTML Report: $($exportPaths.Html)" -ForegroundColor Green
        
        if ($metadata.FailureCount -gt 0) {
            Write-Host "`nFailed Deletions:" -ForegroundColor Red
            $results | Where-Object Status -eq "Failed" | ForEach-Object {
                Write-Host "- $($_.DisplayName): $($_.ErrorMessage)" -ForegroundColor Red
            }
        }
    }
    catch {
        Write-Error "An error occurred: $_"
    }
}


# Run the cleanup
Remove-ConditionalAccessPolicies