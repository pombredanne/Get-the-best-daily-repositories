#Requires -Modules PSWriteHTML

function Convert-CADirectoryToSingleJson {
    param (
        [Parameter(Mandatory)]
        [string]$DirectoryPath,
        
        [Parameter()]
        [string]$OutputPath = "conversion_results.html"
    )

    # Validate directory exists
    if (-not (Test-Path -Path $DirectoryPath)) {
        Write-Error "Directory not found: $DirectoryPath"
        return
    }

    # Initialize array to store all policies
    $allPolicies = @()
    $results = [System.Collections.ArrayList]::new()

    # Process all JSON files
    Get-ChildItem -Path $DirectoryPath -Filter "*.json" | ForEach-Object {
        try {
            Write-Host "Processing $($_.FullName)..."
            
            # Read and convert the JSON content
            $policy = Get-Content -Path $_.FullName -Raw | ConvertFrom-Json

            # Add to policies array
            $allPolicies += $policy

            # Add success result
            $null = $results.Add([PSCustomObject]@{
                FileName = $_.Name
                Status = "Success"
                Error = ""
                PolicyName = $policy.displayName
            })
        }
        catch {
            # Add failure result
            $null = $results.Add([PSCustomObject]@{
                FileName = $_.Name
                Status = "Failed"
                Error = $_.Exception.Message
                PolicyName = ""
            })
        }
    }

    # Create combined JSON structure
    $combinedJson = @{
        '@odata.context' = 'https://graph.microsoft.com/beta/$metadata#policies/conditionalAccessPolicies'
        'value' = $allPolicies
    }

    # Copy to clipboard
    $combinedJson | ConvertTo-Json -Depth 20 | Set-Clipboard

    # Generate HTML report
    $metadata = @{
        GeneratedBy = $env:USERNAME
        GeneratedOn = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        TotalPolicies = $results.Count
        SuccessCount = ($results | Where-Object Status -eq "Success").Count
        FailureCount = ($results | Where-Object Status -eq "Failed").Count
    }

    New-HTML -Title "Conditional Access Policy Conversion Report" -FilePath $OutputPath -ShowHTML {
        New-HTMLSection -HeaderText "Conversion Summary" {
            New-HTMLPanel {
                New-HTMLText -Text @"
                <h3>Report Details</h3>
                <ul>
                    <li>Generated By: $($metadata.GeneratedBy)</li>
                    <li>Generated On: $($metadata.GeneratedOn)</li>
                    <li>Total Policies Processed: $($metadata.TotalPolicies)</li>
                    <li>Successful Conversions: $($metadata.SuccessCount)</li>
                    <li>Failed Conversions: $($metadata.FailureCount)</li>
                </ul>
"@
            }
        }
        
        New-HTMLSection -HeaderText "Policy Conversion Results" {
            New-HTMLTable -DataTable $results -ScrollX -Buttons @('copyHtml5', 'excelHtml5', 'csvHtml5') -SearchBuilder {
                New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Failed' -BackgroundColor Salmon -Color Black
                New-TableCondition -Name 'Status' -ComparisonType string -Operator eq -Value 'Success' -BackgroundColor LightGreen -Color Black
            }
        }
    }

    # Display summary
    Write-Host "`nConversion Summary:" -ForegroundColor Cyan
    Write-Host "----------------"
    Write-Host "Successful conversions: $($metadata.SuccessCount)" -ForegroundColor Green
    Write-Host "Failed conversions: $($metadata.FailureCount)" -ForegroundColor $(if ($metadata.FailureCount -gt 0) { "Red" } else { "Green" })
    Write-Host "`nCombined JSON has been copied to clipboard" -ForegroundColor Green
    Write-Host "Report saved to: $OutputPath" -ForegroundColor Green

    # Open the report
    Start-Process $OutputPath
}

# Example usage:
Convert-CADirectoryToSingleJson -DirectoryPath "C:\code\CA\KVS\cabaseline202409\ConditionalAccess"