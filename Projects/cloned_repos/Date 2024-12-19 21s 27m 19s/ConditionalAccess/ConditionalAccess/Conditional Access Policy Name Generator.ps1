# Functions for policy generation
function New-CAPolicyName {
    param (
        [string]$CategoryCode,
        [string]$SequenceNumber,
        [string]$Scope,
        [string]$Action,
        [string]$Condition,
        [string]$Clients,
        [string]$Version
    )
    
    "CA$CategoryCode$SequenceNumber - $($Scope.ToUpper()) - $($Action.ToUpper()) - $Condition - when - $Clients - v$Version.json"
}

function Export-CAPolicy {
    param (
        [string]$OutputPath = ".\CAPolicies.csv"
    )

    $policies = @(
        # Identity & Authentication Policies
        @{
            CategoryCode = "CAP"
            SequenceNumber = "001"
            Scope = "GLOBAL"
            Action = "BLOCK"
            Condition = "LegacyAuth"
            Clients = "AllClients"
            Version = "1.0"
        }
        @{
            CategoryCode = "CAP"
            SequenceNumber = "002"
            Scope = "GLOBAL"
            Action = "BLOCK"
            Condition = "DeviceCodeAuth"
            Clients = "AllClients"
            Version = "1.0"
        }
        @{
            CategoryCode = "CAU"
            SequenceNumber = "001"
            Scope = "ADMINS"
            Action = "GRANT"
            Condition = "RequirePhishingResistantMFA"
            Clients = "BrowserModernAuthClients"
            Version = "1.0"
        }
        # Location-Based Access
        @{
            CategoryCode = "CAL"
            SequenceNumber = "001"
            Scope = "GLOBAL"
            Action = "BLOCK"
            Condition = "NonAllowedCountries"
            Clients = "AllClients"
            Version = "1.0"
        }
        # Device-Based Policies
        @{
            CategoryCode = "CAD"
            SequenceNumber = "001"
            Scope = "GLOBAL"
            Action = "BLOCK"
            Condition = "UnsupportedPlatforms"
            Clients = "AllClients"
            Version = "1.0"
        }
        # Risk-Based Policies
        @{
            CategoryCode = "CAU"
            SequenceNumber = "002"
            Scope = "ADMINS"
            Action = "BLOCK"
            Condition = "AnyRiskLevel"
            Clients = "AllClients"
            Version = "1.0"
        }
        # Guest-Specific Policies
        @{
            CategoryCode = "CAU"
            SequenceNumber = "003"
            Scope = "GUESTS"
            Action = "BLOCK"
            Condition = "SensitiveApps"
            Clients = "AllClients"
            Version = "1.0"
        }
        # Break-Glass Policies
        @{
            CategoryCode = "CAB"
            SequenceNumber = "001"
            Scope = "SELECTED"
            Action = "GRANT"
            Condition = "EmergencyAccess"
            Clients = "BrowserModernAuthClients"
            Version = "1.0"
        }
    )

    $output = foreach ($policy in $policies) {
        [PSCustomObject]@{
            PolicyName = New-CAPolicyName @policy
            CategoryCode = $policy.CategoryCode
            Scope = $policy.Scope
            Action = $policy.Action
            Condition = $policy.Condition
            Clients = $policy.Clients
            Version = $policy.Version
        }
    }

    # Export to CSV
    $output | Export-Csv -Path $OutputPath -NoTypeInformation

    # Generate HTML report
    $HTMLPath = $OutputPath.Replace('.csv', '.html')
    
    $metadata = @{
        GeneratedBy = $env:USERNAME
        GeneratedOn = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        TotalPolicies = $output.Count
        Categories = ($output | Group-Object CategoryCode | ForEach-Object { "$($_.Name): $($_.Count)" }) -join ", "
    }
    
    New-HTML -Title "Conditional Access Policies" -FilePath $HTMLPath -ShowHTML {
        New-HTMLSection -HeaderText "Generation Summary" {
            New-HTMLPanel {
                New-HTMLText -Text @"
                <h3>Report Details</h3>
                <ul>
                    <li>Generated By: $($metadata.GeneratedBy)</li>
                    <li>Generated On: $($metadata.GeneratedOn)</li>
                    <li>Total Policies: $($metadata.TotalPolicies)</li>
                    <li>Categories: $($metadata.Categories)</li>
                </ul>
"@
            }
        }
        
        New-HTMLSection -HeaderText "Conditional Access Policies" {
            New-HTMLTable -DataTable $output -ScrollX -Buttons @('copyHtml5', 'excelHtml5', 'csvHtml5') -SearchBuilder {
                New-TableCondition -Name 'Action' -ComparisonType string -Operator eq -Value 'BLOCK' -BackgroundColor Salmon -Color Black
                New-TableCondition -Name 'Action' -ComparisonType string -Operator eq -Value 'GRANT' -BackgroundColor LightGreen -Color Black
                New-TableCondition -Name 'Action' -ComparisonType string -Operator eq -Value 'SESSION' -BackgroundColor LightBlue -Color Black
            }
        }
    }

    # Display summary in console
    Write-Host "`nPolicy Summary:" -ForegroundColor Cyan
    $output | Group-Object CategoryCode | ForEach-Object {
        Write-Host "$($_.Name): $($_.Count) policies"
    }

    Write-Host "`nOutput files generated:" -ForegroundColor Green
    Write-Host "CSV: $OutputPath"
    Write-Host "HTML: $HTMLPath"
}

# Execute the function
Export-CAPolicy