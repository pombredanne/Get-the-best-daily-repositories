"""add_process_step

Revision ID: e1e475154dfc
Revises: 34b7216ce425
Create Date: 2024-07-19 17:31:33.232000

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite


# revision identifiers, used by Alembic.
revision: str = "e1e475154dfc"
down_revision: Union[str, None] = "34b7216ce425"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "process_steps",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("process_id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("output", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["assets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["process_id"],
            ["processes.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_process_steps_id"), "process_steps", ["id"], unique=False)
    op.add_column("processes", sa.Column("details", sa.JSON(), nullable=True))
    op.add_column(
        "processes", sa.Column("message", sa.String(length=255), nullable=False)
    )

    # Handle the ALTER COLUMN for SQLite
    if op.get_bind().dialect.name == "sqlite":
        with op.batch_alter_table("processes") as batch_op:
            batch_op.add_column(
                sa.Column(
                    "new_status",
                    sa.Enum(
                        "PENDING",
                        "IN_PROGRESS",
                        "COMPLETED",
                        "FAILED",
                        name="processstatus",
                    ),
                    nullable=False,
                    server_default="PENDING",
                )
            )

        # Copy data from old column to new column
        op.execute("UPDATE processes SET new_status = status")

        with op.batch_alter_table("processes") as batch_op:
            batch_op.drop_column("status")
            batch_op.alter_column("new_status", new_column_name="status")
    else:
        op.alter_column(
            "processes",
            "status",
            existing_type=sa.INTEGER(),
            type_=sa.Enum(
                "PENDING", "IN_PROGRESS", "COMPLETED", "FAILED", name="processstatus"
            ),
            existing_nullable=False,
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if op.get_bind().dialect.name == "sqlite":
        with op.batch_alter_table("processes") as batch_op:
            batch_op.add_column(
                sa.Column(
                    "old_status", sa.Integer(), nullable=False, server_default="0"
                )
            )

        # Copy data from new column to old column
        op.execute(
            "UPDATE processes SET old_status = (CASE status WHEN 'PENDING' THEN 0 WHEN 'IN_PROGRESS' THEN 1 WHEN 'COMPLETED' THEN 2 WHEN 'FAILED' THEN 3 END)"
        )

        with op.batch_alter_table("processes") as batch_op:
            batch_op.drop_column("status")
            batch_op.alter_column("old_status", new_column_name="status")
    else:
        op.alter_column(
            "processes",
            "status",
            existing_type=sa.Enum(
                "PENDING", "IN_PROGRESS", "COMPLETED", "FAILED", name="processstatus"
            ),
            type_=sa.INTEGER(),
            existing_nullable=False,
        )

    op.drop_column("processes", "message")
    op.drop_column("processes", "details")
    op.drop_index(op.f("ix_process_steps_id"), table_name="process_steps")
    op.drop_table("process_steps")
    # ### end Alembic commands ###
