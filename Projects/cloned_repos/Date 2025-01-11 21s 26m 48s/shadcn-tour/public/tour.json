{
  "name": "tour",
  "type": "registry:block",
  "description": "",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "alert-dialog",
    "button"
  ],
  "files": [
    {
      "path": "examples/tour.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { AnimatePresence, motion } from \"motion/react\";\nimport type React from \"react\";\nimport {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\n\nimport {\n\tAlertDialog,\n\tAlertDialogContent,\n\tAlertDialogDescription,\n\tAlertDialogHeader,\n\tAlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nimport { Torus } from \"lucide-react\";\n\nexport interface TourStep {\n\tcontent: React.ReactNode;\n\tselectorId: string;\n\twidth?: number;\n\theight?: number;\n\tonClickWithinArea?: () => void;\n\tposition?: \"top\" | \"bottom\" | \"left\" | \"right\";\n}\n\ninterface TourContextType {\n\tcurrentStep: number;\n\ttotalSteps: number;\n\tnextStep: () => void;\n\tpreviousStep: () => void;\n\tendTour: () => void;\n\tisActive: boolean;\n\tstartTour: () => void;\n\tsetSteps: (steps: TourStep[]) => void;\n\tsteps: TourStep[];\n\tisTourCompleted: boolean;\n\tsetIsTourCompleted: (completed: boolean) => void;\n}\n\ninterface TourProviderProps {\n\tchildren: React.ReactNode;\n\tonComplete?: () => void;\n\tclassName?: string;\n\tisTourCompleted?: boolean;\n}\n\nconst TourContext = createContext<TourContextType | null>(null);\n\nconst PADDING = 16;\nconst CONTENT_WIDTH = 300;\nconst CONTENT_HEIGHT = 200;\n\nfunction getElementPosition(id: string) {\n\tconst element = document.getElementById(id);\n\tif (!element) return null;\n\tconst rect = element.getBoundingClientRect();\n\treturn {\n\t\ttop: rect.top + window.scrollY,\n\t\tleft: rect.left + window.scrollX,\n\t\twidth: rect.width,\n\t\theight: rect.height,\n\t};\n}\n\nfunction calculateContentPosition(\n\telementPos: { top: number; left: number; width: number; height: number },\n\tposition: \"top\" | \"bottom\" | \"left\" | \"right\" = \"bottom\",\n) {\n\tconst viewportWidth = window.innerWidth;\n\tconst viewportHeight = window.innerHeight;\n\n\tlet left = elementPos.left;\n\tlet top = elementPos.top;\n\n\tswitch (position) {\n\t\tcase \"top\":\n\t\t\ttop = elementPos.top - CONTENT_HEIGHT - PADDING;\n\t\t\tleft = elementPos.left + elementPos.width / 2 - CONTENT_WIDTH / 2;\n\t\t\tbreak;\n\t\tcase \"bottom\":\n\t\t\ttop = elementPos.top + elementPos.height + PADDING;\n\t\t\tleft = elementPos.left + elementPos.width / 2 - CONTENT_WIDTH / 2;\n\t\t\tbreak;\n\t\tcase \"left\":\n\t\t\tleft = elementPos.left - CONTENT_WIDTH - PADDING;\n\t\t\ttop = elementPos.top + elementPos.height / 2 - CONTENT_HEIGHT / 2;\n\t\t\tbreak;\n\t\tcase \"right\":\n\t\t\tleft = elementPos.left + elementPos.width + PADDING;\n\t\t\ttop = elementPos.top + elementPos.height / 2 - CONTENT_HEIGHT / 2;\n\t\t\tbreak;\n\t}\n\n\treturn {\n\t\ttop: Math.max(\n\t\t\tPADDING,\n\t\t\tMath.min(top, viewportHeight - CONTENT_HEIGHT - PADDING),\n\t\t),\n\t\tleft: Math.max(\n\t\t\tPADDING,\n\t\t\tMath.min(left, viewportWidth - CONTENT_WIDTH - PADDING),\n\t\t),\n\t\twidth: CONTENT_WIDTH,\n\t\theight: CONTENT_HEIGHT,\n\t};\n}\n\nexport function TourProvider({\n\tchildren,\n\tonComplete,\n\tclassName,\n\tisTourCompleted = false,\n}: TourProviderProps) {\n\tconst [steps, setSteps] = useState<TourStep[]>([]);\n\tconst [currentStep, setCurrentStep] = useState(-1);\n\tconst [elementPosition, setElementPosition] = useState<{\n\t\ttop: number;\n\t\tleft: number;\n\t\twidth: number;\n\t\theight: number;\n\t} | null>(null);\n\tconst [isCompleted, setIsCompleted] = useState(isTourCompleted);\n\n\tconst updateElementPosition = useCallback(() => {\n\t\tif (currentStep >= 0 && currentStep < steps.length) {\n\t\t\tconst position = getElementPosition(steps[currentStep]?.selectorId ?? \"\");\n\t\t\tif (position) {\n\t\t\t\tsetElementPosition(position);\n\t\t\t}\n\t\t}\n\t}, [currentStep, steps]);\n\n\tuseEffect(() => {\n\t\tupdateElementPosition();\n\t\twindow.addEventListener(\"resize\", updateElementPosition);\n\t\twindow.addEventListener(\"scroll\", updateElementPosition);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"resize\", updateElementPosition);\n\t\t\twindow.removeEventListener(\"scroll\", updateElementPosition);\n\t\t};\n\t}, [updateElementPosition]);\n\n\tconst nextStep = useCallback(async () => {\n\t\tsetCurrentStep((prev) => {\n\t\t\tif (prev >= steps.length - 1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn prev + 1;\n\t\t});\n\n\t\tif (currentStep === steps.length - 1) {\n\t\t\tsetIsTourCompleted(true);\n\t\t\tonComplete?.();\n\t\t}\n\t}, [steps.length, onComplete, currentStep]);\n\n\tconst previousStep = useCallback(() => {\n\t\tsetCurrentStep((prev) => (prev > 0 ? prev - 1 : prev));\n\t}, []);\n\n\tconst endTour = useCallback(() => {\n\t\tsetCurrentStep(-1);\n\t}, []);\n\n\tconst startTour = useCallback(() => {\n\t\tif (isTourCompleted) {\n\t\t\treturn;\n\t\t}\n\t\tsetCurrentStep(0);\n\t}, [isTourCompleted]);\n\n\tconst handleClick = useCallback(\n\t\t(e: MouseEvent) => {\n\t\t\tif (\n\t\t\t\tcurrentStep >= 0 &&\n\t\t\t\telementPosition &&\n\t\t\t\tsteps[currentStep]?.onClickWithinArea\n\t\t\t) {\n\t\t\t\tconst clickX = e.clientX + window.scrollX;\n\t\t\t\tconst clickY = e.clientY + window.scrollY;\n\n\t\t\t\tconst isWithinBounds =\n\t\t\t\t\tclickX >= elementPosition.left &&\n\t\t\t\t\tclickX <=\n\t\t\t\t\t\telementPosition.left +\n\t\t\t\t\t\t\t(steps[currentStep]?.width || elementPosition.width) &&\n\t\t\t\t\tclickY >= elementPosition.top &&\n\t\t\t\t\tclickY <=\n\t\t\t\t\t\telementPosition.top +\n\t\t\t\t\t\t\t(steps[currentStep]?.height || elementPosition.height);\n\n\t\t\t\tif (isWithinBounds) {\n\t\t\t\t\tsteps[currentStep].onClickWithinArea?.();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[currentStep, elementPosition, steps],\n\t);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"click\", handleClick);\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"click\", handleClick);\n\t\t};\n\t}, [handleClick]);\n\n\tconst setIsTourCompleted = useCallback((completed: boolean) => {\n\t\tsetIsCompleted(completed);\n\t}, []);\n\n\treturn (\n\t\t<TourContext.Provider\n\t\t\tvalue={{\n\t\t\t\tcurrentStep,\n\t\t\t\ttotalSteps: steps.length,\n\t\t\t\tnextStep,\n\t\t\t\tpreviousStep,\n\t\t\t\tendTour,\n\t\t\t\tisActive: currentStep >= 0,\n\t\t\t\tstartTour,\n\t\t\t\tsetSteps,\n\t\t\t\tsteps,\n\t\t\t\tisTourCompleted: isCompleted,\n\t\t\t\tsetIsTourCompleted,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t\t<AnimatePresence>\n\t\t\t\t{currentStep >= 0 && elementPosition && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t\t\t\t\texit={{ opacity: 0 }}\n\t\t\t\t\t\t\tclassName=\"absolute inset-0 z-50 overflow-hidden bg-black/50\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tclipPath: `polygon(\n                  0% 0%,                                                                          /* top-left */\n                  0% 100%,                                                                        /* bottom-left */\n                  100% 100%,                                                                      /* bottom-right */\n                  100% 0%,                                                                        /* top-right */\n                  \n                  /* Create rectangular hole */\n                  ${elementPosition.left}px 0%,                                                   /* top edge start */\n                  ${elementPosition.left}px ${elementPosition.top}px,                             /* hole top-left */\n                  ${elementPosition.left + (steps[currentStep]?.width || elementPosition.width)}px ${elementPosition.top}px,  /* hole top-right */\n                  ${elementPosition.left + (steps[currentStep]?.width || elementPosition.width)}px ${elementPosition.top + (steps[currentStep]?.height || elementPosition.height)}px,  /* hole bottom-right */\n                  ${elementPosition.left}px ${elementPosition.top + (steps[currentStep]?.height || elementPosition.height)}px,  /* hole bottom-left */\n                  ${elementPosition.left}px 0%                                                    /* back to top edge */\n                )`,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tinitial={{ opacity: 0, scale: 0.95 }}\n\t\t\t\t\t\t\tanimate={{ opacity: 1, scale: 1 }}\n\t\t\t\t\t\t\texit={{ opacity: 0, scale: 0.95 }}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t\t\ttop: elementPosition.top,\n\t\t\t\t\t\t\t\tleft: elementPosition.left,\n\t\t\t\t\t\t\t\twidth: steps[currentStep]?.width || elementPosition.width,\n\t\t\t\t\t\t\t\theight: steps[currentStep]?.height || elementPosition.height,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"z-[100] border-2 border-muted-foreground\",\n\t\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tinitial={{ opacity: 0, y: 10, top: 50, right: 50 }}\n\t\t\t\t\t\t\tanimate={{\n\t\t\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\t\t\ttop: calculateContentPosition(\n\t\t\t\t\t\t\t\t\telementPosition,\n\t\t\t\t\t\t\t\t\tsteps[currentStep]?.position,\n\t\t\t\t\t\t\t\t).top,\n\t\t\t\t\t\t\t\tleft: calculateContentPosition(\n\t\t\t\t\t\t\t\t\telementPosition,\n\t\t\t\t\t\t\t\t\tsteps[currentStep]?.position,\n\t\t\t\t\t\t\t\t).left,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\t\tduration: 0.8,\n\t\t\t\t\t\t\t\tease: [0.16, 1, 0.3, 1],\n\t\t\t\t\t\t\t\topacity: { duration: 0.4 },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\texit={{ opacity: 0, y: 10 }}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t\t\twidth: calculateContentPosition(\n\t\t\t\t\t\t\t\t\telementPosition,\n\t\t\t\t\t\t\t\t\tsteps[currentStep]?.position,\n\t\t\t\t\t\t\t\t).width,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName=\"bg-background relative z-[100] rounded-lg border p-4 shadow-lg\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"text-muted-foreground absolute right-4 top-4 text-xs\">\n\t\t\t\t\t\t\t\t{currentStep + 1} / {steps.length}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<AnimatePresence mode=\"wait\">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\t\t\tkey={`tour-content-${currentStep}`}\n\t\t\t\t\t\t\t\t\t\tinitial={{ opacity: 0, scale: 0.95, filter: \"blur(4px)\" }}\n\t\t\t\t\t\t\t\t\t\tanimate={{ opacity: 1, scale: 1, filter: \"blur(0px)\" }}\n\t\t\t\t\t\t\t\t\t\texit={{ opacity: 0, scale: 0.95, filter: \"blur(4px)\" }}\n\t\t\t\t\t\t\t\t\t\tclassName=\"overflow-hidden\"\n\t\t\t\t\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\t\t\t\t\tduration: 0.2,\n\t\t\t\t\t\t\t\t\t\t\theight: {\n\t\t\t\t\t\t\t\t\t\t\t\tduration: 0.4,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{steps[currentStep]?.content}\n\t\t\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t\t\t\t<div className=\"mt-4 flex justify-between\">\n\t\t\t\t\t\t\t\t\t\t{currentStep > 0 && (\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={previousStep}\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={currentStep === 0}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"text-sm text-muted-foreground hover:text-foreground\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tPrevious\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tonClick={nextStep}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"ml-auto text-sm font-medium text-primary hover:text-primary/90\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{currentStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</AnimatePresence>\n\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</AnimatePresence>\n\t\t</TourContext.Provider>\n\t);\n}\n\nexport function useTour() {\n\tconst context = useContext(TourContext);\n\tif (!context) {\n\t\tthrow new Error(\"useTour must be used within a TourProvider\");\n\t}\n\treturn context;\n}\n\nexport function TourAlertDialog({\n\tisOpen,\n\tsetIsOpen,\n}: { isOpen: boolean; setIsOpen: (isOpen: boolean) => void }) {\n\tconst { startTour, steps, isTourCompleted, currentStep } = useTour();\n\n\tif (isTourCompleted || steps.length === 0 || currentStep > -1) {\n\t\treturn null;\n\t}\n\tconst handleSkip = async () => {\n\t\tsetIsOpen(false);\n\t};\n\n\treturn (\n\t\t<AlertDialog open={isOpen}>\n\t\t\t<AlertDialogContent className=\"max-w-md p-6\">\n\t\t\t\t<AlertDialogHeader className=\"flex flex-col items-center justify-center\">\n\t\t\t\t\t<div className=\"relative mb-4\">\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tinitial={{ scale: 0.7, filter: \"blur(10px)\" }}\n\t\t\t\t\t\t\tanimate={{\n\t\t\t\t\t\t\t\tscale: 1,\n\t\t\t\t\t\t\t\tfilter: \"blur(0px)\",\n\t\t\t\t\t\t\t\ty: [0, -8, 0],\n\t\t\t\t\t\t\t\trotate: [42, 48, 42],\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\t\tduration: 0.4,\n\t\t\t\t\t\t\t\tease: \"easeOut\",\n\t\t\t\t\t\t\t\ty: {\n\t\t\t\t\t\t\t\t\tduration: 2.5,\n\t\t\t\t\t\t\t\t\trepeat: Number.POSITIVE_INFINITY,\n\t\t\t\t\t\t\t\t\tease: \"easeInOut\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trotate: {\n\t\t\t\t\t\t\t\t\tduration: 3,\n\t\t\t\t\t\t\t\t\trepeat: Number.POSITIVE_INFINITY,\n\t\t\t\t\t\t\t\t\tease: \"easeInOut\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Torus className=\"size-32 stroke-1 text-primary\" />\n\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<AlertDialogTitle className=\"text-center text-xl font-medium\">\n\t\t\t\t\t\tWelcome to the Tour\n\t\t\t\t\t</AlertDialogTitle>\n\t\t\t\t\t<AlertDialogDescription className=\"text-muted-foreground mt-2 text-center text-sm\">\n\t\t\t\t\t\tTake a quick tour to learn about the key features and functionality\n\t\t\t\t\t\tof this application.\n\t\t\t\t\t</AlertDialogDescription>\n\t\t\t\t</AlertDialogHeader>\n\t\t\t\t<div className=\"mt-6 space-y-3\">\n\t\t\t\t\t<Button onClick={startTour} className=\"w-full\">\n\t\t\t\t\t\tStart Tour\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={handleSkip} variant=\"ghost\" className=\"w-full\">\n\t\t\t\t\t\tSkip Tour\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</AlertDialogContent>\n\t\t</AlertDialog>\n\t);\n}\n",
      "target": "components/tour.tsx"
    },
    {
      "path": "examples/tour-constants.ts",
      "type": "registry:lib",
      "content": "export const TOUR_STEP_IDS = {\n  TEAM_SWITCHER: \"team-switcher\",\n  WRITING_AREA: \"writing-area\",\n  ASK_AI: \"ask-ai\",\n  FAVORITES: \"favorites\",\n};\n",
      "target": "lib/tour-constants.ts"
    }
  ]
}